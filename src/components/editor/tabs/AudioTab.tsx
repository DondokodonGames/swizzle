import React, { useState, useCallback, useRef, useEffect } from 'react';
import { GameProject } from '../../../types/editor/GameProject';
import { AudioAsset } from '../../../types/editor/ProjectAssets';
import { EDITOR_LIMITS } from '../../../constants/EditorLimits';

interface AudioTabProps {
  project: GameProject;
  onProjectUpdate: (project: GameProject) => void;
}

type AudioType = 'bgm' | 'se';

// FileUploader „Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÔºàÁ∞°ÊòìÁâà - „Ç§„É≥„É©„Ç§„É≥ÂÆüË£ÖÔºâ
interface FileUploaderProps {
  accept: string;
  maxSize: number;
  onUpload: (files: FileList) => void;
  disabled?: boolean;
  className?: string;
  children: React.ReactNode;
}

const FileUploader: React.FC<FileUploaderProps> = ({
  accept,
  maxSize,
  onUpload,
  disabled = false,
  className = '',
  children
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [dragOver, setDragOver] = useState(false);

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    if (!disabled) setDragOver(true);
  };

  const handleDragLeave = () => {
    setDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    
    if (disabled) return;
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      onUpload(files);
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      onUpload(files);
    }
  };

  return (
    <div
      className={`${className} ${dragOver ? 'bg-purple-50 border-purple-400' : ''}`}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
    >
      <input
        ref={fileInputRef}
        type="file"
        accept={accept}
        onChange={handleFileSelect}
        disabled={disabled}
        className="hidden"
      />
      <div
        onClick={() => !disabled && fileInputRef.current?.click()}
        className="cursor-pointer"
      >
        {children}
      </div>
    </div>
  );
};

// Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó
const getAudioInfo = (file: File): Promise<{
  duration: number;
  format: string;
}> => {
  return new Promise((resolve, reject) => {
    const audio = new Audio();
    const url = URL.createObjectURL(file);
    
    audio.addEventListener('loadedmetadata', () => {
      resolve({
        duration: audio.duration,
        format: file.type.split('/')[1] || 'unknown'
      });
      URL.revokeObjectURL(url);
    });
    
    audio.addEventListener('error', () => {
      reject(new Error('Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'));
      URL.revokeObjectURL(url);
    });
    
    audio.src = url;
  });
};

// Èü≥Â£∞Ê≥¢ÂΩ¢„ÇíÊèèÁîª
const drawWaveform = (canvas: HTMLCanvasElement, audioBuffer: AudioBuffer) => {
  const ctx = canvas.getContext('2d')!;
  const width = canvas.width;
  const height = canvas.height;
  
  ctx.clearRect(0, 0, width, height);
  
  const data = audioBuffer.getChannelData(0);
  const step = Math.ceil(data.length / width);
  const amp = height / 2;
  
  ctx.fillStyle = '#6366f1';
  ctx.beginPath();
  
  for (let i = 0; i < width; i++) {
    let min = 1.0;
    let max = -1.0;
    
    for (let j = 0; j < step; j++) {
      const datum = data[i * step + j];
      if (datum < min) min = datum;
      if (datum > max) max = datum;
    }
    
    const minY = (1 + min) * amp;
    const maxY = (1 + max) * amp;
    
    ctx.fillRect(i, minY, 1, maxY - minY);
  }
};

// ÊôÇÈñì„Éï„Ç©„Éº„Éû„ÉÉ„Éà (Áßí ‚Üí mm:ss)
const formatTime = (seconds: number): string => {
  const mins = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${mins}:${secs.toString().padStart(2, '0')}`;
};

// „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Éï„Ç©„Éº„Éû„ÉÉ„Éà
const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

export const AudioTab: React.FC<AudioTabProps> = ({ project, onProjectUpdate }) => {
  const [activeAudioType, setActiveAudioType] = useState<AudioType>('bgm');
  const [playingId, setPlayingId] = useState<string | null>(null);
  const [currentTime, setCurrentTime] = useState<number>(0);
  const [uploading, setUploading] = useState(false);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [volume, setVolume] = useState<number>(1.0);
  
  const audioRef = useRef<HTMLAudioElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const audioContextRef = useRef<AudioContext | null>(null);

  // üîß ‰øÆÊ≠£ÁÆáÊâÄ1: Èü≥Â£∞ÂÆπÈáèË®àÁÆóÔºà176-177Ë°åÁõÆÔºâ
  const getAudioSize = useCallback(() => {
    let total = 0;
    // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
    if (project.assets.audio?.bgm) total += project.assets.audio.bgm.fileSize;
    project.assets.audio?.se?.forEach(se => total += se.fileSize);
    return total;
  }, [project.assets.audio]);

  const audioSize = getAudioSize();
  const maxAudioSize = EDITOR_LIMITS.AUDIO.BGM_MAX_SIZE + 
                     (EDITOR_LIMITS.AUDIO.SE_MAX_SIZE * EDITOR_LIMITS.PROJECT.MAX_SE_COUNT);
  const audioSizePercentage = (audioSize / maxAudioSize) * 100;

  // Èü≥Â£∞„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜÔºà‰øÆÊ≠£Áâà - filesÂûãÊåáÂÆöÔºâ
  const handleAudioUpload = useCallback(async (files: FileList, type: AudioType) => {
    if (uploading) return;
    setUploading(true);

    try {
      const file = files[0];
      
      if (!file || !file.type.startsWith('audio/')) {
        alert('Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
      }
      
      // Èü≥Â£∞ÊÉÖÂ†±ÂèñÂæó
      const audioInfo = await getAudioInfo(file);
      
      // ÊôÇÈñìÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
      const maxDuration = type === 'bgm' ? EDITOR_LIMITS.AUDIO.BGM_MAX_DURATION : EDITOR_LIMITS.AUDIO.SE_MAX_DURATION;
      if (audioInfo.duration > maxDuration) {
        alert(`Èü≥Â£∞„ÅåÈï∑„Åô„Åé„Åæ„Åô„ÄÇÊúÄÂ§ß${maxDuration}Áßí„Åæ„Åß„Åß„Åô„ÄÇ`);
        return;
      }

      // üîß ‰øÆÊ≠£ÁÆáÊâÄ2: ÂÆπÈáèÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØÔºà210Ë°åÁõÆÔºâ
      // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
      if (type === 'se' && (project.assets.audio?.se?.length || 0) >= EDITOR_LIMITS.PROJECT.MAX_SE_COUNT) {
        alert(`ÂäπÊûúÈü≥„ÅØÊúÄÂ§ß${EDITOR_LIMITS.PROJECT.MAX_SE_COUNT}ÂÄã„Åæ„ÅßËøΩÂä†„Åß„Åç„Åæ„Åô`);
        return;
      }

      // Base64Â§âÊèõ
      const reader = new FileReader();
      reader.onload = (e) => {
        const dataUrl = e.target?.result as string;
        const now = new Date().toISOString();
        
        const newAudioAsset: AudioAsset = {
          id: crypto.randomUUID(),
          name: file.name.replace(/\.[^/.]+$/, ''), // Êã°ÂºµÂ≠êÈô§Âéª
          dataUrl,
          originalName: file.name,
          duration: audioInfo.duration,
          fileSize: file.size,
          format: audioInfo.format,
          volume: 0.8,
          loop: type === 'bgm',
          uploadedAt: now
        };

        // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊõ¥Êñ∞
        const updatedAssets = { ...project.assets };
        
        if (type === 'bgm') {
          updatedAssets.audio.bgm = newAudioAsset;
        } else {
          updatedAssets.audio.se.push(newAudioAsset);
        }

        // üîß ‰øÆÊ≠£ÁÆáÊâÄ3: Áµ±Ë®àÊõ¥Êñ∞Ôºà265-266Ë°åÁõÆ„ÄÅ273-274Ë°åÁõÆÔºâ
        const imageSize = updatedAssets.objects.reduce((sum, obj) => sum + obj.totalSize, 0) + 
                         (updatedAssets.background?.totalSize || 0);
        // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
        const audioSize = (updatedAssets.audio?.bgm?.fileSize || 0) + 
                         (updatedAssets.audio?.se?.reduce((sum, se) => sum + se.fileSize, 0) || 0);

        updatedAssets.statistics = {
          totalImageSize: imageSize,
          totalAudioSize: audioSize,
          totalSize: imageSize + audioSize,
          usedSlots: {
            background: updatedAssets.background ? 1 : 0,
            objects: updatedAssets.objects.length,
            texts: updatedAssets.texts.length,
            // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
            bgm: updatedAssets.audio?.bgm ? 1 : 0,
            se: updatedAssets.audio?.se?.length || 0
          },
          limitations: {
            isNearImageLimit: false,
            isNearAudioLimit: audioSize > maxAudioSize * 0.8,
            isNearTotalLimit: (imageSize + audioSize) > EDITOR_LIMITS.PROJECT.TOTAL_MAX_SIZE * 0.8,
            hasViolations: false
          }
        };

        updatedAssets.lastModified = now;

        onProjectUpdate({
          ...project,
          assets: updatedAssets,
          totalSize: imageSize + audioSize,
          lastModified: now
        });
      };

      reader.readAsDataURL(file);
    } catch (error) {
      console.error('Èü≥Â£∞„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
      alert('Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setUploading(false);
    }
  }, [project, onProjectUpdate, uploading, maxAudioSize]);

  // Èü≥Â£∞ÂÜçÁîü
  const playAudio = useCallback((audio: AudioAsset) => {
    if (!audioRef.current) return;

    // Êó¢„Å´ÂÜçÁîü‰∏≠„ÅÆÂ†¥Âêà„ÅØÂÅúÊ≠¢
    if (playingId === audio.id) {
      audioRef.current.pause();
      setPlayingId(null);
      return;
    }

    audioRef.current.src = audio.dataUrl;
    audioRef.current.volume = audio.volume * volume;
    audioRef.current.loop = audio.loop;
    
    audioRef.current.play().then(() => {
      setPlayingId(audio.id);
    }).catch(error => {
      console.error('Èü≥Â£∞ÂÜçÁîü„Ç®„É©„Éº:', error);
      alert('Èü≥Â£∞„ÅÆÂÜçÁîü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    });
  }, [playingId, volume]);

  // Èü≥Â£∞ÂÅúÊ≠¢
  const stopAudio = useCallback(() => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
    }
    setPlayingId(null);
    setCurrentTime(0);
  }, []);

  // üîß ‰øÆÊ≠£ÁÆáÊâÄ4: Èü≥Â£∞ÂâäÈô§Ôºà358Ë°åÁõÆÔºâ
  const deleteAudio = useCallback((type: AudioType, id?: string) => {
    const updatedAssets = { ...project.assets };
    let removedSize = 0;
    const now = new Date().toISOString();

    // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
    if (type === 'bgm' && updatedAssets.audio?.bgm) {
      removedSize = updatedAssets.audio.bgm.fileSize;
      updatedAssets.audio.bgm = null;
    } else if (type === 'se' && id) {
      // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
      const index = updatedAssets.audio?.se?.findIndex(se => se.id === id) ?? -1;
      if (index >= 0 && updatedAssets.audio?.se) {
        removedSize = updatedAssets.audio.se[index].fileSize;
        updatedAssets.audio.se.splice(index, 1);
      }
    }

    // ÂÜçÁîü‰∏≠„ÅÆÈü≥Â£∞„ÇíÂâäÈô§„Åó„ÅüÂ†¥Âêà„ÅØÂÅúÊ≠¢
    // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
    if ((type === 'bgm' && playingId === project.assets.audio?.bgm?.id) ||
        (type === 'se' && playingId === id)) {
      stopAudio();
    }

    // üîß ‰øÆÊ≠£ÁÆáÊâÄ5: Áµ±Ë®àÊõ¥Êñ∞Ôºà370-371Ë°åÁõÆ„ÄÅ377-378Ë°åÁõÆÔºâ
    const imageSize = updatedAssets.objects.reduce((sum, obj) => sum + obj.totalSize, 0) + 
                     (updatedAssets.background?.totalSize || 0);
    // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
    const audioSize = (updatedAssets.audio?.bgm?.fileSize || 0) + 
                     (updatedAssets.audio?.se?.reduce((sum, se) => sum + se.fileSize, 0) || 0);

    updatedAssets.statistics = {
      totalImageSize: imageSize,
      totalAudioSize: audioSize,
      totalSize: imageSize + audioSize,
      usedSlots: {
        background: updatedAssets.background ? 1 : 0,
        objects: updatedAssets.objects.length,
        texts: updatedAssets.texts.length,
        // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
        bgm: updatedAssets.audio?.bgm ? 1 : 0,
        se: updatedAssets.audio?.se?.length || 0
      },
      limitations: {
        isNearImageLimit: false,
        isNearAudioLimit: false,
        isNearTotalLimit: false,
        hasViolations: false
      }
    };

    updatedAssets.lastModified = now;

    onProjectUpdate({
      ...project,
      assets: updatedAssets,
      totalSize: project.totalSize - removedSize,
      lastModified: now
    });
  }, [project, onProjectUpdate, playingId, stopAudio]);

  // Èü≥Â£∞„Éó„É≠„Éë„ÉÜ„Ç£Êõ¥Êñ∞
  const updateAudioProperty = useCallback((type: AudioType, id: string, property: string, value: any) => {
    const updatedAssets = { ...project.assets };
    const now = new Date().toISOString();
    
    // ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä†
    if (type === 'bgm' && updatedAssets.audio?.bgm?.id === id) {
      updatedAssets.audio.bgm = {
        ...updatedAssets.audio.bgm,
        [property]: value
      };
    } else if (type === 'se' && updatedAssets.audio?.se) {
      const index = updatedAssets.audio.se.findIndex(se => se.id === id);
      if (index >= 0) {
        updatedAssets.audio.se[index] = {
          ...updatedAssets.audio.se[index],
          [property]: value
        };
      }
    }

    updatedAssets.lastModified = now;

    onProjectUpdate({
      ...project,
      assets: updatedAssets,
      lastModified: now
    });
  }, [project, onProjectUpdate]);

  // Èü≥Â£∞ÂÜçÁîüÊôÇÈñìÊõ¥Êñ∞
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const updateTime = () => setCurrentTime(audio.currentTime);
    const onEnded = () => {
      setPlayingId(null);
      setCurrentTime(0);
    };

    audio.addEventListener('timeupdate', updateTime);
    audio.addEventListener('ended', onEnded);

    return () => {
      audio.removeEventListener('timeupdate', updateTime);
      audio.removeEventListener('ended', onEnded);
    };
  }, []);

  return (
    <div className="audio-tab p-6">
      {/* ÂÆπÈáèË°®Á§∫ */}
      <div className="mb-6 p-4 bg-gray-50 rounded-xl">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-medium text-gray-700">Èü≥Â£∞ÂÆπÈáè</span>
          <span className="text-sm text-gray-600">
            {formatFileSize(audioSize)} / {formatFileSize(maxAudioSize)}
          </span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3">
          <div 
            className={`h-3 rounded-full transition-all duration-300 ${
              audioSizePercentage > 90 ? 'bg-red-500' : 
              audioSizePercentage > 70 ? 'bg-yellow-500' : 'bg-green-500'
            }`}
            style={{ width: `${Math.min(audioSizePercentage, 100)}%` }}
          />
        </div>
      </div>

      {/* „Çø„ÉñÂàá„ÇäÊõø„Åà */}
      <div className="flex space-x-1 mb-6 bg-gray-100 p-1 rounded-xl">
        {[
          { id: 'bgm' as AudioType, label: 'BGM', icon: 'üéµ' },
          { id: 'se' as AudioType, label: 'ÂäπÊûúÈü≥', icon: 'üîä' }
        ].map((tab) => (
          <button
            key={tab.id}
            onClick={() => setActiveAudioType(tab.id)}
            className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all ${
              activeAudioType === tab.id
                ? 'bg-white text-purple-600 shadow-sm'
                : 'text-gray-600 hover:text-gray-800'
            }`}
          >
            <span>{tab.icon}</span>
            <span>{tab.label}</span>
          </button>
        ))}
      </div>

      {/* „Éû„Çπ„Çø„ÉºÈü≥Èáè */}
      <div className="mb-6 p-4 bg-white rounded-xl border border-gray-200">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm font-medium">üîä „Éû„Çπ„Çø„ÉºÈü≥Èáè</span>
          <span className="text-sm text-gray-600">{Math.round(volume * 100)}%</span>
        </div>
        <input
          type="range"
          min="0"
          max="1"
          step="0.1"
          value={volume}
          onChange={(e) => setVolume(parseFloat(e.target.value))}
          className="w-full"
        />
      </div>

      {/* üîß ‰øÆÊ≠£ÁÆáÊâÄ6: BGMÁÆ°ÁêÜÔºà494Ë°åÁõÆ‰ª•ÈôçÔºâ */}
      {activeAudioType === 'bgm' && (
        <div>
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            üéµ BGM
            <span className="ml-2 text-sm text-gray-500">(1Êõ≤„Åæ„Åß)</span>
          </h3>

          {/* ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä† */}
          {project.assets.audio?.bgm ? (
            <div className="bg-white rounded-xl border-2 border-gray-200 p-4">
              <div className="flex items-center justify-between mb-4">
                <div className="flex-1">
                  <h4 className="font-medium text-lg">{project.assets.audio.bgm.name}</h4>
                  <p className="text-sm text-gray-500">
                    {formatTime(project.assets.audio.bgm.duration)} ‚Ä¢ {formatFileSize(project.assets.audio.bgm.fileSize)}
                  </p>
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => playAudio(project.assets.audio.bgm!)}
                    className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                      playingId === project.assets.audio.bgm.id
                        ? 'bg-red-100 text-red-700 hover:bg-red-200'
                        : 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                    }`}
                  >
                    {playingId === project.assets.audio.bgm.id ? '‚èπÔ∏è ÂÅúÊ≠¢' : '‚ñ∂Ô∏è ÂÜçÁîü'}
                  </button>
                  <button
                    onClick={() => setEditingId(
                      editingId === project.assets.audio.bgm!.id ? null : project.assets.audio.bgm!.id
                    )}
                    className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
                  >
                    ‚öôÔ∏è Ë®≠ÂÆö
                  </button>
                  <button
                    onClick={() => deleteAudio('bgm')}
                    className="px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200"
                  >
                    üóëÔ∏è ÂâäÈô§
                  </button>
                </div>
              </div>

              {/* Ê≥¢ÂΩ¢Ë°®Á§∫ÔºàÁ∞°ÊòìÁâàÔºâ */}
              <div className="mb-4 bg-gray-100 rounded-lg p-4">
                <canvas
                  ref={canvasRef}
                  width={400}
                  height={60}
                  className="w-full h-15 bg-gray-50 rounded"
                />
                {playingId === project.assets.audio.bgm.id && (
                  <div className="mt-2 text-sm text-gray-600">
                    ÂÜçÁîüÊôÇÈñì: {formatTime(currentTime)} / {formatTime(project.assets.audio.bgm.duration)}
                  </div>
                )}
              </div>

              {/* Ë®≠ÂÆö„Éë„Éç„É´ */}
              {editingId === project.assets.audio.bgm.id && (
                <div className="border-t pt-4 space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Èü≥Èáè ({Math.round(project.assets.audio.bgm.volume * 100)}%)
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={project.assets.audio.bgm.volume}
                      onChange={(e) => updateAudioProperty('bgm', project.assets.audio.bgm!.id, 'volume', parseFloat(e.target.value))}
                      className="w-full"
                    />
                  </div>
                  <div>
                    <label className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={project.assets.audio.bgm.loop}
                        onChange={(e) => updateAudioProperty('bgm', project.assets.audio.bgm!.id, 'loop', e.target.checked)}
                      />
                      <span className="text-sm">„É´„Éº„ÉóÂÜçÁîü</span>
                    </label>
                  </div>
                </div>
              )}
            </div>
          ) : (
            <FileUploader
              accept="audio/*"
              maxSize={EDITOR_LIMITS.AUDIO.BGM_MAX_SIZE}
              onUpload={(files: FileList) => handleAudioUpload(files, 'bgm')}
              disabled={uploading}
              className="mb-4"
            >
              <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-purple-400 hover:bg-purple-50 transition-colors">
                <div className="text-6xl mb-4">üéµ</div>
                <p className="text-lg font-medium text-gray-700 mb-2">BGM„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ</p>
                <p className="text-sm text-gray-500 mb-4">
                  Èü≥Â£∞„Éï„Ç°„Ç§„É´„Çí„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Åô„Çã„Åã„ÄÅ„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÈÅ∏Êäû
                </p>
                <div className="px-6 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 font-medium inline-block">
                  {uploading ? 'Âá¶ÁêÜ‰∏≠...' : '„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû'}
                </div>
                <p className="text-xs text-gray-400 mt-4">
                  ÊúÄÂ§ß{EDITOR_LIMITS.AUDIO.BGM_MAX_DURATION}Áßí ‚Ä¢ {formatFileSize(EDITOR_LIMITS.AUDIO.BGM_MAX_SIZE)}„Åæ„Åß
                </p>
              </div>
            </FileUploader>
          )}
        </div>
      )}

      {/* üîß ‰øÆÊ≠£ÁÆáÊâÄ7: ÂäπÊûúÈü≥ÁÆ°ÁêÜÔºà608Ë°åÁõÆ‰ª•ÈôçÔºâ */}
      {activeAudioType === 'se' && (
        <div>
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            üîä ÂäπÊûúÈü≥
            <span className="ml-2 text-sm text-gray-500">
              {/* ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä† */}
              ({project.assets.audio?.se?.length || 0}/{EDITOR_LIMITS.PROJECT.MAX_SE_COUNT})
            </span>
          </h3>

          {/* Êó¢Â≠òÂäπÊûúÈü≥‰∏ÄË¶ß */}
          <div className="space-y-3 mb-6">
            {/* ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä† */}
            {project.assets.audio?.se?.map((se) => (
              <div key={se.id} className="bg-white rounded-xl border-2 border-gray-200 p-4">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <h4 className="font-medium">{se.name}</h4>
                    <p className="text-sm text-gray-500">
                      {formatTime(se.duration)} ‚Ä¢ {formatFileSize(se.fileSize)}
                    </p>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => playAudio(se)}
                      className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                        playingId === se.id
                          ? 'bg-red-100 text-red-700 hover:bg-red-200'
                          : 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                      }`}
                    >
                      {playingId === se.id ? '‚èπÔ∏è' : '‚ñ∂Ô∏è'}
                    </button>
                    <button
                      onClick={() => setEditingId(editingId === se.id ? null : se.id)}
                      className="px-3 py-1 bg-gray-100 text-gray-700 rounded-lg text-sm hover:bg-gray-200"
                    >
                      ‚öôÔ∏è
                    </button>
                    <button
                      onClick={() => deleteAudio('se', se.id)}
                      className="px-3 py-1 bg-red-100 text-red-700 rounded-lg text-sm hover:bg-red-200"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>

                {/* SEË®≠ÂÆö„Éë„Éç„É´ */}
                {editingId === se.id && (
                  <div className="border-t mt-4 pt-4 space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ÂäπÊûúÈü≥Âêç
                      </label>
                      <input
                        type="text"
                        value={se.name}
                        onChange={(e) => updateAudioProperty('se', se.id, 'name', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Èü≥Èáè ({Math.round(se.volume * 100)}%)
                      </label>
                      <input
                        type="range"
                        min="0"
                        max="1"
                        step="0.1"
                        value={se.volume}
                        onChange={(e) => updateAudioProperty('se', se.id, 'volume', parseFloat(e.target.value))}
                        className="w-full"
                      />
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* üîß ‰øÆÊ≠£ÁÆáÊâÄ8: Êñ∞Ë¶èÂäπÊûúÈü≥ËøΩÂä†Ôºà684Ë°åÁõÆÔºâ */}
          {/* ‚úÖ ‰øÆÊ≠£: „Ç™„Éó„Ç∑„Éß„Éä„É´„ÉÅ„Çß„Éº„É≥ËøΩÂä† */}
          {(project.assets.audio?.se?.length || 0) < EDITOR_LIMITS.PROJECT.MAX_SE_COUNT && (
            <FileUploader
              accept="audio/*"
              maxSize={EDITOR_LIMITS.AUDIO.SE_MAX_SIZE}
              onUpload={(files: FileList) => handleAudioUpload(files, 'se')}
              disabled={uploading}
              className="mb-4"
            >
              <div className="border-2 border-dashed border-gray-300 rounded-xl p-6 text-center hover:border-purple-400 hover:bg-purple-50 transition-colors">
                <div className="text-4xl mb-3">üîä</div>
                <p className="text-lg font-medium text-gray-700 mb-2">ÂäπÊûúÈü≥„ÇíËøΩÂä†</p>
                <p className="text-sm text-gray-500 mb-3">
                  Èü≥Â£∞„Éï„Ç°„Ç§„É´„Çí„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó
                </p>
                <div className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 font-medium inline-block">
                  {uploading ? 'Âá¶ÁêÜ‰∏≠...' : '„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû'}
                </div>
                <p className="text-xs text-gray-400 mt-3">
                  ÊúÄÂ§ß{EDITOR_LIMITS.AUDIO.SE_MAX_DURATION}Áßí ‚Ä¢ {formatFileSize(EDITOR_LIMITS.AUDIO.SE_MAX_SIZE)}„Åæ„Åß
                </p>
              </div>
            </FileUploader>
          )}
        </div>
      )}

      {/* Èö†„ÅóÈü≥Â£∞Ë¶ÅÁ¥† */}
      <audio
        ref={audioRef}
        onLoadedData={() => {
          // Ê≥¢ÂΩ¢ÊèèÁîª„Å™„Å©„ÅÆÂá¶ÁêÜ„Çí„Åì„Åì„Å´ËøΩÂä†ÂèØËÉΩ
        }}
        preload="none"
      />

      {/* „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠Ë°®Á§∫ */}
      {uploading && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-8 text-center">
            <div className="animate-spin text-4xl mb-4">üéµ</div>
            <p className="text-lg font-semibold">Èü≥Â£∞„ÇíÂá¶ÁêÜ‰∏≠...</p>
            <p className="text-sm text-gray-600 mt-2">Â∞ë„ÄÖ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ</p>
          </div>
        </div>
      )}

      {/* Èü≥Â£∞„Ç≥„É≥„Éà„É≠„Éº„É´Ë™¨Êòé */}
      <div className="mt-8 p-4 bg-blue-50 rounded-xl">
        <h4 className="font-medium text-blue-800 mb-2">üí° Èü≥Â£∞„ÅÆ„Éí„É≥„Éà</h4>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>‚Ä¢ BGM„ÅØËá™Âãï„É´„Éº„Éó„ÄÅÂäπÊûúÈü≥„ÅØ1ÂõûÂÜçÁîü„Åï„Çå„Åæ„Åô</li>
          <li>‚Ä¢ BGM„ÅØÊúÄÂ§ß{EDITOR_LIMITS.AUDIO.BGM_MAX_DURATION}Áßí„ÄÅÂäπÊûúÈü≥„ÅØÊúÄÂ§ß{EDITOR_LIMITS.AUDIO.SE_MAX_DURATION}Áßí„Åæ„Åß</li>
          <li>‚Ä¢ ÂØæÂøúÂΩ¢Âºè: MP3, WAV, OGG</li>
          <li>‚Ä¢ Èü≥Èáè„ÅØ0%„Äú100%„ÅßË™øÊï¥„Åß„Åç„Åæ„Åô</li>
        </ul>
      </div>
    </div>
  );
};