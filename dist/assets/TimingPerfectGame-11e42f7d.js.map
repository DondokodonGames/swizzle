{"version":3,"file":"TimingPerfectGame-11e42f7d.js","sources":["../../src/game-engine/TimingPerfectGame.ts"],"sourcesContent":["// TimingPerfectGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'timing_perfect' in your factory/registry.\n//\n// Gameplay:\n// - A needle spins around a circle.\n// - Tap when the needle is inside the highlighted target arc.\n// - Tighter center \"perfect\" sub-arc yields higher score and combo.\n// - Clear when you reach the target number of hits before time runs out.\n//\n// Design constraints for compatibility with your project:\n// - Do NOT narrow base types or redeclare GameTemplate fields (like duration/difficulty).\n// - Use an internal `finished` flag instead of relying on specific GameState unions.\n// - Expose results via `onGameEnd(success, score)` callback.\nimport { Application, Container, Graphics, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface TimingPerfectSettings extends GameSettings {\n  // Inherit: duration (seconds), difficulty\n  rounds?: number;       // hits required to clear (defaults vary by difficulty)\n  baseSpeedDeg?: number; // base angular speed in deg/sec (default by difficulty)\n  zoneSizeDeg?: number;  // target arc size in degrees (default by difficulty)\n  perfectDeg?: number;   // perfect window size (<= zoneSizeDeg). default fraction by difficulty\n  rotateDir?: 'cw' | 'ccw' | 'alternate'; // spin direction policy. default 'alternate'\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty {\n  return v === 'easy' || v === 'normal' || v === 'hard';\n}\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nconst DEG2RAD = Math.PI / 180;\nfunction wrapDeg(a: number) { a %= 360; if (a < 0) a += 360; return a; }\nfunction angleInRangeDeg(a: number, start: number, end: number) {\n  // normalize and handle wrap-around (e.g., 350..20)\n  a = wrapDeg(a); start = wrapDeg(start); end = wrapDeg(end);\n  if (start <= end) return a >= start && a <= end;\n  return a >= start || a <= end;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\n\nexport class TimingPerfectGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n\n  // visuals\n  private ring!: Graphics;\n  private zone!: Graphics;\n  private perfectZone!: Graphics;\n  private needle!: Graphics;\n  private hitFlash!: Graphics;\n\n  // runtime\n  private finished = false;\n  private remainMs = 30_000;\n\n  // geometry & motion\n  private cx = 0; private cy = 0; private R = 160;\n  private angleDeg = 0;\n  private speedDeg = 180;\n  private dir = 1; // 1=cw, -1=ccw, will alternate if configured\n\n  // target windows\n  private zoneSize = 40;     // deg\n  private perfectSize = 16;  // deg\n  private zoneStart = 0;     // deg, zone is [start..start+size]\n  private roundsNeeded = 8;\n  private roundsDone = 0;\n\n  // scoring & combo\n  private combo = 0;\n  private score = 0;\n\n  // config\n  private rotatePolicy: 'cw' | 'ccw' | 'alternate' = 'alternate';\n\n  constructor(app: Application, settings: TimingPerfectSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as TimingPerfectSettings;\n    const diff = getDifficulty(s);\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n    this.cx = W / 2; this.cy = H / 2; this.R = Math.min(W, H) * 0.34;\n\n    // duration\n    const rawDuration = (s as any).duration as number;\n    this.remainMs = (typeof rawDuration === 'number' && isFinite(rawDuration)) ? Math.max(1000, Math.round(rawDuration * 1000)) : 30_000;\n\n    // difficulty defaults\n    if (diff === 'easy') {\n      this.roundsNeeded = 6;\n      this.speedDeg = s.baseSpeedDeg ?? 160;\n      this.zoneSize = s.zoneSizeDeg ?? 60;\n      this.perfectSize = s.perfectDeg ?? Math.floor(this.zoneSize * 0.45);\n    } else if (diff === 'hard') {\n      this.roundsNeeded = 10;\n      this.speedDeg = s.baseSpeedDeg ?? 240;\n      this.zoneSize = s.zoneSizeDeg ?? 28;\n      this.perfectSize = s.perfectDeg ?? Math.max(8, Math.floor(this.zoneSize * 0.35));\n    } else {\n      this.roundsNeeded = 8;\n      this.speedDeg = s.baseSpeedDeg ?? 180;\n      this.zoneSize = s.zoneSizeDeg ?? 40;\n      this.perfectSize = s.perfectDeg ?? Math.floor(this.zoneSize * 0.40);\n    }\n    this.zoneSize = clamp(this.zoneSize, 8, 120);\n    this.perfectSize = clamp(this.perfectSize, 4, Math.max(6, this.zoneSize - 4));\n\n    // rotation policy\n    this.rotatePolicy = s.rotateDir ?? 'alternate';\n    if (this.rotatePolicy === 'cw') this.dir = 1;\n    else if (this.rotatePolicy === 'ccw') this.dir = -1;\n    else this.dir = Math.random() < 0.5 ? 1 : -1;\n\n    this.scene.eventMode = 'static';\n    this.scene.on('pointerdown', (e: FederatedPointerEvent) => {\n      e.stopPropagation();\n      this.onTap();\n    });\n\n    // draw base ring\n    this.ring = new Graphics();\n    this.drawRing();\n    this.scene.addChild(this.ring);\n\n    // draw zones\n    this.zone = new Graphics();\n    this.perfectZone = new Graphics();\n    this.randomizeZone(true);\n    this.scene.addChild(this.zone, this.perfectZone);\n\n    // needle\n    this.needle = new Graphics();\n    this.drawNeedle();\n    this.scene.addChild(this.needle);\n\n    // hit flash\n    this.hitFlash = new Graphics();\n    this.hitFlash.alpha = 0;\n    this.scene.addChild(this.hitFlash);\n\n    this.container.addChild(this.scene);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n    const dt = dtMs / 1000;\n\n    // time\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(false);\n      return;\n    }\n\n    // rotate\n    this.angleDeg = wrapDeg(this.angleDeg + this.dir * this.speedDeg * dt);\n    this.drawNeedle();\n\n    // fade hit flash\n    if (this.hitFlash.alpha > 0) {\n      this.hitFlash.alpha = Math.max(0, this.hitFlash.alpha - 3 * dt);\n    }\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private drawRing() {\n    const g = this.ring;\n    g.clear();\n    g.lineStyle(10, 0x124559, 1);\n    g.drawCircle(this.cx, this.cy, this.R);\n    g.lineStyle(2, 0x88c0d0, 0.5);\n    g.drawCircle(this.cx, this.cy, this.R * 0.75);\n  }\n\n  private drawZone() {\n    const outerR = this.R * 0.95;\n    const innerR = this.R * 0.65;\n    const start = this.zoneStart * DEG2RAD;\n    const end = (this.zoneStart + this.zoneSize) * DEG2RAD;\n\n    const pgSize = this.perfectSize;\n    const pStart = (this.zoneStart + (this.zoneSize - pgSize) / 2) * DEG2RAD;\n    const pEnd = (this.zoneStart + (this.zoneSize + pgSize) / 2) * DEG2RAD;\n\n    // main zone (soft green)\n    const z = this.zone;\n    z.clear();\n    z.beginFill(0x92e6a7, 0.5);\n    z.moveTo(this.cx + innerR * Math.cos(start), this.cy + innerR * Math.sin(start));\n    z.arc(this.cx, this.cy, outerR, start, end);\n    z.lineTo(this.cx + innerR * Math.cos(end), this.cy + innerR * Math.sin(end));\n    z.arc(this.cx, this.cy, innerR, end, start, true);\n    z.closePath();\n    z.endFill();\n\n    // perfect zone (bright)\n    const p = this.perfectZone;\n    p.clear();\n    p.beginFill(0xffe08a, 0.9);\n    p.moveTo(this.cx + innerR * Math.cos(pStart), this.cy + innerR * Math.sin(pStart));\n    p.arc(this.cx, this.cy, outerR, pStart, pEnd);\n    p.lineTo(this.cx + innerR * Math.cos(pEnd), this.cy + innerR * Math.sin(pEnd));\n    p.arc(this.cx, this.cy, innerR, pEnd, pStart, true);\n    p.closePath();\n    p.endFill();\n  }\n\n  private drawNeedle() {\n    const g = this.needle;\n    const a = this.angleDeg * DEG2RAD;\n    const x1 = this.cx + Math.cos(a) * (this.R * 0.1);\n    const y1 = this.cy + Math.sin(a) * (this.R * 0.1);\n    const x2 = this.cx + Math.cos(a) * (this.R * 1.02);\n    const y2 = this.cy + Math.sin(a) * (this.R * 1.02);\n\n    g.clear();\n    g.lineStyle(6, 0xffffff, 1);\n    g.moveTo(this.cx, this.cy);\n    g.lineTo(x2, y2);\n    g.lineStyle(10, 0xffffff, 0.2);\n    g.moveTo(x1, y1);\n    g.lineTo(this.cx, this.cy);\n\n    // center dot\n    g.beginFill(0xffffff);\n    g.drawCircle(this.cx, this.cy, 6);\n    g.endFill();\n  }\n\n  private onTap() {\n    if (this.finished) return;\n    const a = wrapDeg(this.angleDeg);\n    const zStart = this.zoneStart;\n    const zEnd = this.zoneStart + this.zoneSize;\n    const inZone = angleInRangeDeg(a, zStart, zEnd);\n\n    const pHalf = this.perfectSize / 2;\n    const pStart = this.zoneStart + (this.zoneSize / 2) - pHalf;\n    const pEnd = this.zoneStart + (this.zoneSize / 2) + pHalf;\n    const inPerfect = angleInRangeDeg(a, pStart, pEnd);\n\n    if (!inZone) {\n      // miss\n      this.combo = 0;\n      this.score = Math.max(0, this.score - 150);\n      this.flash(0xff5a5a);\n      // small speed assist (optional): slow down a bit after miss\n      this.speedDeg = Math.max(120, this.speedDeg * 0.97);\n      return;\n    }\n\n    // hit!\n    this.roundsDone++;\n    if (inPerfect) {\n      this.combo++;\n      const bonus = 600 + Math.min(8, this.combo) * 80;\n      this.score += bonus;\n      this.flash(0xfff1a6);\n    } else {\n      this.combo = 0;\n      this.score += 300;\n      this.flash(0x92e6a7);\n    }\n\n    // dynamic difficulty: zone shrinks slightly, speed up slightly\n    this.zoneSize = clamp(this.zoneSize * 0.985, 10, 120);\n    this.speedDeg = clamp(this.speedDeg * 1.02, 100, 420);\n\n    if (this.roundsDone >= this.roundsNeeded) {\n      this.finish(true);\n      return;\n    }\n\n    // reposition zone & maybe flip direction\n    this.randomizeZone(this.rotatePolicy === 'alternate');\n  }\n\n  private randomizeZone(flipDir: boolean) {\n    // pick a new start far enough from current needle to avoid trivial hit\n    const forbidden = this.angleDeg;\n    let start = Math.random() * 360;\n    const tries = 20;\n    for (let i = 0; i < tries; i++) {\n      const cand = Math.random() * 360;\n      // ensure at least 25deg away from current needle\n      if (Math.abs(wrapDeg(cand - forbidden)) > 25) { start = cand; break; }\n    }\n    this.zoneStart = wrapDeg(start);\n    if (flipDir) this.dir *= -1;\n    this.drawZone();\n  }\n\n  private flash(color: number) {\n    const g = this.hitFlash;\n    g.clear();\n    g.beginFill(color, 0.35);\n    g.drawCircle(this.cx, this.cy, this.R * 1.08);\n    g.endFill();\n    g.alpha = 1;\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 8);\n    const roundsBonus = this.roundsDone * 120;\n    const score = Math.max(0, this.score + timeBonus + roundsBonus + (success ? 800 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","DEG2RAD","wrapDeg","a","angleInRangeDeg","start","end","clamp","x","lo","hi","TimingPerfectGame","GameTemplate","app","__publicField","Container","s","diff","W","H","rawDuration","e","Graphics","_e","deltaTime","dtMs","dt","result","_a","g","outerR","innerR","pgSize","pStart","pEnd","z","p","x1","y1","x2","y2","zStart","zEnd","inZone","pHalf","inPerfect","bonus","flipDir","forbidden","tries","i","cand","color","success","timeBonus","roundsBonus","score"],"mappings":"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"}