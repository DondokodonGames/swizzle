{"version":3,"file":"QuickDodgeGame-f6072646.js","sources":["../../src/game-engine/QuickDodgeGame.ts"],"sourcesContent":["// QuickDodgeGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'quick_dodge' in your factory/registry.\n// This class avoids narrowing base types: no local `settings`/`timerText` declarations.\n// It uses an internal `finished` flag instead of relying on a specific GameState union.\nimport { Application, Container, Graphics, Sprite, Texture, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface QuickDodgeSettings extends GameSettings {\n  // Inherit `duration: number` from GameSettings (do NOT redeclare here).\n  // Optional knobs specific to this template:\n  spawnBaseMs?: number; // base spawn interval in ms (fallback 650)\n  playerSpeed?: number; // pixels per second for lateral move (fallback 600)\n}\n\n// --- small helpers ---\nfunction isDifficulty(v: unknown): v is Difficulty {\n  return v === 'easy' || v === 'normal' || v === 'hard';\n}\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction msFromSettingsSeconds(s: GameSettings, key: keyof GameSettings, fallbackMs: number) {\n  const v = (s as any)?.[key];\n  if (typeof v === 'number' && isFinite(v)) {\n    // interpret as seconds\n    return Math.max(1000, Math.round(v * 1000));\n  }\n  return fallbackMs;\n}\nfunction createGradientSprite(app: Application, topHex: number, bottomHex: number, width?: number, height?: number) {\n  const w = width ?? app.renderer.width;\n  const h = height ?? app.renderer.height;\n  const canvas = document.createElement('canvas');\n  canvas.width = w; canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n  const g = ctx.createLinearGradient(0, 0, 0, h);\n  const hex = (n: number) => `#${n.toString(16).padStart(6, '0')}`;\n  g.addColorStop(0, hex(topHex)); g.addColorStop(1, hex(bottomHex));\n  ctx.fillStyle = g; ctx.fillRect(0, 0, w, h);\n  return new Sprite(Texture.from(canvas));\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\n\n// --- obstacle model ---\ninterface Obstacle {\n  g: Graphics;\n  vx: number;\n  vy: number;\n  w: number;\n  h: number;\n}\n\nexport class QuickDodgeGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private player!: Graphics;\n  private obstacles: Obstacle[] = [];\n  private finished = false;\n\n  // timing\n  private remainMs = 30_000;\n  private spawnAccumMs = 0;\n  private spawnBaseMs = 650;\n\n  // control\n  private targetX = 0;\n  private playerSpeed = 600; // px/s lateral\n  private playerRadius = 22;\n\n  // difficulty\n  private diffMul = 1;\n\n  constructor(app: Application, settings: QuickDodgeSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as QuickDodgeSettings;\n    const diff = getDifficulty(s);\n    this.remainMs = msFromSettingsSeconds(s, 'duration', 30_000);\n    this.spawnBaseMs = (typeof s.spawnBaseMs === 'number' && isFinite(s.spawnBaseMs)) ? Math.max(50, Math.round(s.spawnBaseMs)) : 650;\n    this.playerSpeed = (typeof s.playerSpeed === 'number' && isFinite(s.playerSpeed)) ? s.playerSpeed : 600;\n\n    // difficulty multipliers (spawn rate + speed)\n    if (diff === 'easy')  this.diffMul = 0.85;\n    else if (diff === 'hard') this.diffMul = 1.25;\n    else this.diffMul = 1.0;\n\n    const W = this.app.renderer.width; const H = this.app.renderer.height;\n\n    // background\n    const bg = createGradientSprite(this.app, 0x0ea5e9, 0x022c44);\n    this.scene.addChild(bg);\n\n    // player\n    this.player = new Graphics();\n    this.player.beginFill(0xffffff); this.player.drawCircle(0, 0, this.playerRadius); this.player.endFill();\n    this.player.x = W / 2; this.player.y = H - 80;\n    this.targetX = this.player.x;\n    this.scene.addChild(this.player);\n\n    // input: follow pointer X (simple, low-latency)\n    const onPointerMove = (e: FederatedPointerEvent) => {\n      const local = e.global;\n      this.targetX = clamp(local.x, 20, W - 20);\n    };\n    const onPointerDown = (e: FederatedPointerEvent) => onPointerMove(e);\n    this.scene.eventMode = 'static';\n    this.scene.on('pointermove', onPointerMove);\n    this.scene.on('pointerdown', onPointerDown);\n\n    this.container.addChild(this.scene);\n  }\n\n  handleInput(_event: FederatedPointerEvent): void {\n    // Not used; we listen on scene for pointer events.\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n\n    const dtMs = deltaTime * (1000 / 60);\n    const dtSec = dtMs / 1000;\n    const W = this.app.renderer.width; const H = this.app.renderer.height;\n\n    // countdown\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(true);\n      return;\n    }\n\n    // spawn\n    this.spawnAccumMs += dtMs;\n    const interval = this.spawnBaseMs / this.diffMul;\n    while (this.spawnAccumMs >= interval) {\n      this.spawnAccumMs -= interval;\n      this.spawnObstacle(W);\n    }\n\n    // player move towards targetX\n    const dx = this.targetX - this.player.x;\n    const maxStep = this.playerSpeed * dtSec;\n    if (Math.abs(dx) <= maxStep) this.player.x = this.targetX;\n    else this.player.x += Math.sign(dx) * maxStep;\n\n    // update obstacles\n    const survivors: Obstacle[] = [];\n    for (const o of this.obstacles) {\n      o.g.x += o.vx * dtSec;\n      o.g.y += o.vy * dtSec;\n      // bounce on sides a bit\n      if (o.g.x < o.w/2 || o.g.x > W - o.w/2) o.vx *= -1;\n\n      // collision test (circle vs AABB)\n      if (this.hitCircleAABB(this.player.x, this.player.y, this.playerRadius, o)) {\n        this.finish(false);\n        return;\n      }\n      // keep if on screen\n      if (o.g.y - o.h/2 <= H + 10) survivors.push(o);\n      else this.scene.removeChild(o.g);\n    }\n    this.obstacles = survivors;\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // --- internals ---\n  private spawnObstacle(W: number) {\n    const o = new Graphics();\n    const w = 36 + Math.random() * 50;\n    const h = 18 + Math.random() * 32;\n    o.beginFill(0xffe08a); o.drawRoundedRect(-w/2, -h/2, w, h, 6); o.endFill();\n    o.x = 30 + Math.random() * (W - 60);\n    o.y = -40;\n\n    // speed influenced by difficulty & randomness\n    const vy = 220 * this.diffMul + Math.random() * 180 * this.diffMul; // downward\n    const vx = (Math.random() - 0.5) * 160 * (0.7 + 0.6 * Math.random()); // lateral wobble\n\n    this.scene.addChild(o);\n    this.obstacles.push({ g: o, vx, vy, w, h });\n  }\n\n  private hitCircleAABB(cx: number, cy: number, cr: number, o: Obstacle) {\n    const rx = o.g.x, ry = o.g.y, hw = o.w/2, hh = o.h/2;\n    const nx = clamp(cx, rx - hw, rx + hw);\n    const ny = clamp(cy, ry - hh, ry + hh);\n    const dx = cx - nx, dy = cy - ny;\n    return (dx*dx + dy*dy) <= (cr*cr);\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    // score: based on remaining time\n    const score = success ? Math.round(1000 + this.remainMs / 10) : Math.round(500 + this.remainMs / 20);\n    this.showResult({ success, score });\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","msFromSettingsSeconds","key","fallbackMs","createGradientSprite","app","topHex","bottomHex","width","height","w","h","canvas","ctx","g","hex","n","Sprite","Texture","clamp","x","lo","hi","QuickDodgeGame","GameTemplate","__publicField","Container","s","diff","W","H","bg","Graphics","onPointerMove","e","local","onPointerDown","_event","deltaTime","dtMs","dtSec","interval","dx","maxStep","survivors","o","result","_a","vy","vx","cx","cy","cr","rx","ry","hw","hh","nx","ny","dy","success","score"],"mappings":"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"}