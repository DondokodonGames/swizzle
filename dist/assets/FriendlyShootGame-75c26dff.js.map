{"version":3,"file":"FriendlyShootGame-75c26dff.js","sources":["../../src/game-engine/FriendlyShootGame.ts"],"sourcesContent":["// FriendlyShootGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'friendly_shoot' in your factory/registry.\n//\n// Gameplay:\n// - Targets pop up at random positions for a short time.\n// - Tap targets to \"shoot\". Hitting BAD targets causes penalty (or failure if configured).\n// - Reach the required number of GOOD hits before the timer ends to clear.\n//\n// Project compatibility notes:\n// - Do NOT narrow base types; import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty from GameTemplate.\n// - Use an internal `finished` flag instead of relying on a specific GameState union.\n// - Report results via `onGameEnd(success, score)`.\nimport { Application, Container, Graphics, Text, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface FriendlyShootSettings extends GameSettings {\n  targetHits?: number;     // required number of GOOD hits to clear (defaults by difficulty)\n  spawnBaseMs?: number;    // base spawn interval for targets\n  lifetimeMs?: number;     // base lifetime per target\n  badRatio?: number;       // 0..1 chance that a spawned target is BAD (bomb)\n  allowBadMax?: number;    // max bad hits allowed before fail\n  moveTargets?: boolean;   // whether targets drift slightly\n  palette?: 'steel' | 'forest' | 'candy';\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty { return v === 'easy' || v === 'normal' || v === 'hard'; }\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\n\ntype Target = {\n  g: Graphics;\n  x: number;\n  y: number;\n  r: number;\n  lifeMs: number;\n  good: boolean;\n  vx: number;\n  vy: number;\n};\n\nexport class FriendlyShootGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private finished = false;\n  private remainMs = 30_000;\n\n  // runtime\n  private targets: Target[] = [];\n  private spawnAccum = 0;\n  private spawnBaseMs = 700;\n  private lifetimeMs = 1200;\n  private moveTargets = true;\n  private badRatio = 0.2;\n  private allowBadMax = 2;\n\n  private hitsNeeded = 15;\n  private goodHits = 0;\n  private badHits = 0;\n\n  // difficulty scaling\n  private sizeMul = 1.0;\n  private rateMul = 1.0;\n\n  // scoring\n  private score = 0;\n  private combo = 0;\n\n  // UI feedback\n  private infoText!: Text;\n\n  // colors\n  private colors = {\n    bgTop: 0x0b1020, bgBottom: 0x151a2b,\n    good: 0x92e6a7, bad: 0xff5a5a,\n    targetGood: 0xffffff, targetBad: 0xf97316,\n    text: 0xffffff, dim: 0x94a3b8,\n  };\n\n  constructor(app: Application, settings: FriendlyShootSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as FriendlyShootSettings;\n    const diff = getDifficulty(s);\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // duration\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n\n    // difficulty presets\n    if (diff === 'easy')       { this.hitsNeeded = 12; this.spawnBaseMs = 780; this.lifetimeMs = 1400; this.sizeMul = 1.15; this.rateMul = 0.95; this.allowBadMax = 3; }\n    else if (diff === 'hard')  { this.hitsNeeded = 18; this.spawnBaseMs = 580; this.lifetimeMs = 1000; this.sizeMul = 0.9; this.rateMul = 1.15; this.allowBadMax = 1; }\n    else                       { this.hitsNeeded = 15; this.spawnBaseMs = 680; this.lifetimeMs = 1200; this.sizeMul = 1.0; this.rateMul = 1.0; this.allowBadMax = 2; }\n\n    // overrides\n    if (typeof s.targetHits === 'number' && isFinite(s.targetHits)) this.hitsNeeded = clamp(Math.round(s.targetHits), 6, 40);\n    if (typeof s.spawnBaseMs === 'number' && isFinite(s.spawnBaseMs)) this.spawnBaseMs = clamp(Math.round(s.spawnBaseMs), 120, 2000);\n    if (typeof s.lifetimeMs === 'number' && isFinite(s.lifetimeMs)) this.lifetimeMs = clamp(Math.round(s.lifetimeMs), 400, 4000);\n    if (typeof s.badRatio === 'number' && isFinite(s.badRatio)) this.badRatio = clamp(s.badRatio, 0, 1);\n    if (typeof s.allowBadMax === 'number' && isFinite(s.allowBadMax)) this.allowBadMax = clamp(Math.round(s.allowBadMax), 0, 10);\n    if (typeof s.moveTargets === 'boolean') this.moveTargets = s.moveTargets;\n    if (s.palette === 'forest') {\n      this.colors.bgTop = 0x0b2e20; this.colors.bgBottom = 0x03150f; this.colors.targetBad = 0x34d399;\n    } else if (s.palette === 'candy') {\n      this.colors.bgTop = 0x3b2240; this.colors.bgBottom = 0x1a0b1e; this.colors.targetBad = 0xff6b6b;\n    }\n\n    // background split\n    const bg = new Graphics();\n    bg.beginFill(this.colors.bgTop); bg.drawRect(0, 0, W, Math.floor(H * 0.45)); bg.endFill();\n    bg.beginFill(this.colors.bgBottom); bg.drawRect(0, Math.floor(H * 0.45), W, H); bg.endFill();\n    this.scene.addChild(bg);\n\n    // info text (top)\n    this.infoText = new Text('', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.05),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 5,\n    });\n    this.infoText.anchor.set(0.5);\n    this.infoText.x = W / 2; this.infoText.y = Math.floor(H * 0.22);\n    this.scene.addChild(this.infoText);\n    this.updateInfo();\n\n    // input\n    this.scene.eventMode = 'static';\n    this.scene.on('pointertap', (e: FederatedPointerEvent) => this.onTap(e));\n\n    this.container.addChild(this.scene);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n    const dt = dtMs / 1000;\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // time\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(this.goodHits >= this.hitsNeeded);\n      return;\n    }\n\n    // spawn\n    this.spawnAccum += dtMs;\n    const interval = (this.spawnBaseMs / this.rateMul);\n    while (this.spawnAccum >= interval) {\n      this.spawnAccum -= interval;\n      this.spawnTarget();\n      // ramp difficulty slightly\n      this.rateMul = Math.min(1.6, this.rateMul * 1.01);\n    }\n\n    // update targets\n    const alive: Target[] = [];\n    for (const t of this.targets) {\n      t.lifeMs -= dtMs;\n      if (this.moveTargets) {\n        t.x += t.vx * dt;\n        t.y += t.vy * dt;\n        // bounce softly at edges\n        const r = t.r;\n        if (t.x < r + 10 || t.x > W - r - 10) t.vx *= -1;\n        if (t.y < r + 10 || t.y > H - r - 10) t.vy *= -1;\n        t.g.x = t.x; t.g.y = t.y;\n      }\n      if (t.lifeMs <= 0) {\n        // expire\n        this.scene.removeChild(t.g);\n      } else {\n        alive.push(t);\n      }\n    }\n    this.targets = alive;\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private updateInfo() {\n    this.infoText.text = `Hits: ${this.goodHits}/${this.hitsNeeded}  Bad: ${this.badHits}/${this.allowBadMax}`;\n  }\n\n  private spawnTarget() {\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n    const good = Math.random() > this.badRatio;\n\n    const rBase = Math.min(W, H) * 0.05;\n    const r = clamp(rBase * (good ? 1.0 : 0.9) * this.sizeMul, 14, 46);\n    const margin = 20 + r;\n    const x = margin + Math.random() * (W - margin * 2);\n    const y = Math.max(margin + 40, Math.min(H - margin - 20, margin + 40 + Math.random() * (H - margin * 2 - 60)));\n\n    const g = new Graphics();\n    if (good) {\n      // bullseye target\n      g.beginFill(0xffffff, 1); g.drawCircle(0, 0, r); g.endFill();\n      g.beginFill(0x1f2937, 1); g.drawCircle(0, 0, r * 0.65); g.endFill();\n      g.beginFill(0xffffff, 1); g.drawCircle(0, 0, r * 0.35); g.endFill();\n    } else {\n      // bomb\n      g.beginFill(this.colors.targetBad, 1); g.drawCircle(0, 0, r * 0.9); g.endFill();\n      // fuse\n      g.beginFill(0x222222, 1); g.drawRect(-r*0.15, -r*1.1, r*0.3, r*0.35); g.endFill();\n    }\n    g.x = x; g.y = y;\n    g.eventMode = 'passive'; // we'll handle taps at scene level\n\n    this.scene.addChild(g);\n\n    const vx = (Math.random() - 0.5) * (good ? 40 : 60);\n    const vy = (Math.random() - 0.5) * (good ? 40 : 60);\n    this.targets.push({ g, x, y, r, lifeMs: this.lifetimeMs, good, vx, vy });\n  }\n\n  private onTap(e: FederatedPointerEvent) {\n    if (this.finished) return;\n    const p = this.scene.toLocal(e.global);\n    // check topmost first\n    for (let i = this.targets.length - 1; i >= 0; i--) {\n      const t = this.targets[i];\n      const dx = p.x - t.x, dy = p.y - t.y;\n      if (dx*dx + dy*dy <= t.r*t.r) {\n        // HIT\n        if (t.good) this.onGoodHit(t); else this.onBadHit(t);\n        // remove\n        this.scene.removeChild(t.g);\n        this.targets.splice(i, 1);\n        return;\n      }\n    }\n    // tap empty space => no penalty (keeps pace fast)\n  }\n\n  private onGoodHit(t: Target) {\n    this.goodHits++;\n    this.combo++;\n    const lifeFrac = clamp(t.lifeMs / this.lifetimeMs, 0, 1);\n    const base = 280;\n    const comboBonus = Math.min(8, this.combo) * 50;\n    const speedBonus = Math.round(160 * lifeFrac);\n    this.score += base + comboBonus + speedBonus;\n    this.flashCircle(t.x, t.y, this.colors.good, t.r * 1.3);\n\n    if (this.goodHits >= this.hitsNeeded) {\n      this.finish(true);\n    } else {\n      this.updateInfo();\n    }\n  }\n\n  private onBadHit(t: Target) {\n    this.combo = 0;\n    this.badHits++;\n    this.score = Math.max(0, this.score - 200);\n    this.flashCircle(t.x, t.y, this.colors.bad, t.r * 1.3);\n    this.updateInfo();\n    if (this.badHits > this.allowBadMax) {\n      this.finish(false);\n    }\n  }\n\n  private flashCircle(x: number, y: number, color: number, R: number) {\n    const g = new Graphics();\n    g.beginFill(color, 0.28); g.drawCircle(0, 0, R); g.endFill();\n    g.x = x; g.y = y; this.scene.addChild(g);\n    const steps = 8;\n    for (let i = 1; i <= steps; i++) {\n      setTimeout(() => { g.alpha = Math.max(0, 0.28 * (1 - i/steps)); if (i === steps) this.scene.removeChild(g); }, i * 30);\n    }\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 8);\n    const hitBonus = this.goodHits * 60;\n    const badPenalty = this.badHits * 120;\n    const score = Math.max(0, this.score + timeBonus + hitBonus - badPenalty + (success ? 800 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","secondsToMs","s","fallbackMs","clamp","x","lo","hi","FriendlyShootGame","GameTemplate","app","__publicField","Container","diff","W","H","bg","Graphics","Text","e","_e","deltaTime","dtMs","dt","interval","alive","t","r","result","_a","good","rBase","margin","y","g","vx","vy","p","i","dx","dy","lifeFrac","base","comboBonus","speedBonus","color","R","steps","success","timeBonus","hitBonus","badPenalty","score"],"mappings":"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"}