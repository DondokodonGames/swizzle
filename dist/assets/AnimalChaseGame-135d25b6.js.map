{"version":3,"file":"AnimalChaseGame-135d25b6.js","sources":["../../src/game-engine/AnimalChaseGame.ts"],"sourcesContent":["// AnimalChaseGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'animal_chase' in your factory/registry.\n//\n// Gameplay:\n// - A cute \"animal\" runs along a winding path.\n// - Player must keep their pointer/finger near the animal (within tolerance) while holding down.\n// - Accumulate enough \"in-range\" time before the overall timer ends to clear.\n//\n// Project compatibility notes:\n// - Do NOT narrow base types; import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty.\n// - Use an internal `finished` flag (no reliance on specific GameState unions).\n// - Emit results via `onGameEnd(success, score)`.\nimport { Application, Container, Graphics, Text, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface AnimalChaseSettings extends GameSettings {\n  targetChaseSec?: number;   // seconds of in-range tracking required to clear\n  tolerancePx?: number;      // distance tolerance from animal center\n  allowStrayMs?: number;     // cumulative ms allowed out of range before fail\n  speedPxPerSec?: number;    // animal speed along path\n  pathComplexity?: number;   // number of turns/segments (3..12)\n  hidePath?: boolean;        // if true, hide the guidance path (hard mode spice)\n  palette?: 'meadow' | 'ocean' | 'twilight';\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty { return v === 'easy' || v === 'normal' || v === 'hard'; }\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\n\ntype P = { x: number; y: number; d?: number };\n\nexport class AnimalChaseGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private finished = false;\n  private remainMs = 30_000;\n\n  // visuals\n  private pathG!: Graphics;\n  private animalG!: Graphics;\n  private pointerDot!: Graphics;\n  private infoText!: Text;\n\n  // path + motion\n  private path: P[] = [];\n  private pathIdx = 0;\n  private speed = 220; // px/s\n  private animalR = 18;\n\n  // tracking\n  private pointerDown = false;\n  private ptrX = 0;\n  private ptrY = 0;\n  private tolerance = 40;\n  private targetChase = 12_000; // ms\n  private chasedMs = 0;\n  private strayMs = 0;\n  private strayMax = 3000; // ms\n\n  // scoring\n  private score = 0;\n  private combo = 0;\n\n  // palette\n  private colors = {\n    bgTop: 0x14532d, bgBottom: 0x052e16, // meadow default\n    path: 0x91f2c3,\n    animal: 0xffffff,\n    halo: 0xfff1a6,\n    good: 0x92e6a7, bad: 0xff5a5a,\n    text: 0xffffff,\n  };\n\n  constructor(app: Application, settings: AnimalChaseSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as AnimalChaseSettings;\n    const diff = getDifficulty(s);\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // duration\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n\n    // difficulty presets\n    if (diff === 'easy') {\n      this.targetChase = 10_000; this.tolerance = 48; this.strayMax = 5000; this.speed = 200;\n    } else if (diff === 'hard') {\n      this.targetChase = 14_000; this.tolerance = 34; this.strayMax = 2500; this.speed = 250;\n    } else {\n      this.targetChase = 12_000; this.tolerance = 40; this.strayMax = 3000; this.speed = 220;\n    }\n\n    // overrides\n    if (typeof s.targetChaseSec === 'number' && isFinite(s.targetChaseSec)) this.targetChase = clamp(Math.round(s.targetChaseSec * 1000), 2000, 60000);\n    if (typeof s.tolerancePx === 'number' && isFinite(s.tolerancePx)) this.tolerance = clamp(Math.round(s.tolerancePx), 12, 120);\n    if (typeof s.allowStrayMs === 'number' && isFinite(s.allowStrayMs)) this.strayMax = clamp(Math.round(s.allowStrayMs), 500, 15000);\n    if (typeof s.speedPxPerSec === 'number' && isFinite(s.speedPxPerSec)) this.speed = clamp(Math.round(s.speedPxPerSec), 80, 400);\n    const complexity = clamp(Math.round((s.pathComplexity ?? (diff === 'easy' ? 4 : diff === 'hard' ? 8 : 6))), 3, 12);\n    const hidePath = !!s.hidePath;\n\n    if (s.palette === 'ocean') {\n      this.colors.bgTop = 0x0ea5e9; this.colors.bgBottom = 0x022c44; this.colors.path = 0xb6e3ff;\n    } else if (s.palette === 'twilight') {\n      this.colors.bgTop = 0x301934; this.colors.bgBottom = 0x1a0b1e; this.colors.path = 0xf8c7ff;\n    }\n\n    // background\n    const bg = new Graphics();\n    bg.beginFill(this.colors.bgTop); bg.drawRect(0, 0, W, Math.floor(H * 0.45)); bg.endFill();\n    bg.beginFill(this.colors.bgBottom); bg.drawRect(0, Math.floor(H * 0.45), W, H); bg.endFill();\n    this.scene.addChild(bg);\n\n    // info text\n    this.infoText = new Text('', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.05),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 5,\n    });\n    this.infoText.anchor.set(0.5);\n    this.infoText.x = W / 2; this.infoText.y = Math.floor(H * 0.20);\n    this.scene.addChild(this.infoText);\n    this.updateInfo();\n\n    // build path\n    this.path = this.generatePath(W, H, complexity);\n    // draw path\n    this.pathG = new Graphics();\n    if (!hidePath) {\n      this.drawPath();\n      this.scene.addChild(this.pathG);\n    }\n\n    // animal\n    this.animalG = new Graphics();\n    this.drawAnimal(this.path[0].x, this.path[0].y);\n    this.scene.addChild(this.animalG);\n\n    // pointer dot (feedback)\n    this.pointerDot = new Graphics();\n    this.pointerDot.alpha = 0;\n    this.scene.addChild(this.pointerDot);\n\n    // input\n    this.scene.eventMode = 'static';\n    this.scene.on('pointerdown', (e: FederatedPointerEvent) => { e.stopPropagation(); this.onDown(e); });\n    this.scene.on('pointermove', (e: FederatedPointerEvent) => { e.stopPropagation(); this.onMove(e); });\n    this.scene.on('pointerup',   (e: FederatedPointerEvent) => { e.stopPropagation(); this.onUp(); });\n    this.scene.on('pointerupoutside', (e: FederatedPointerEvent) => { e.stopPropagation(); this.onUp(); });\n\n    this.container.addChild(this.scene);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n    const dt = dtMs / 1000;\n\n    // time\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(this.chasedMs >= this.targetChase);\n      return;\n    }\n\n    // advance along path\n    const stepPix = this.speed * dt;\n    this.advanceAlongPath(stepPix);\n\n    // pointer feedback & progress\n    if (this.pointerDown) {\n      const ax = this.animalG.x, ay = this.animalG.y;\n      const dx = this.ptrX - ax, dy = this.ptrY - ay;\n      const dist = Math.sqrt(dx*dx + dy*dy);\n      const inRange = dist <= this.tolerance;\n\n      if (inRange) {\n        this.chasedMs += dtMs;\n        this.combo++;\n        // periodic scoring while in range\n        if (this.combo % 6 === 0) this.score += 10;\n        this.flashRing(ax, ay, this.colors.good, Math.max(this.animalR + 6, this.tolerance * 0.7), 0.10);\n      } else {\n        this.strayMs += dtMs;\n        this.combo = 0;\n        // red blink when far\n        if (this.strayMs % 400 < dtMs) this.flashRing(ax, ay, this.colors.bad, this.tolerance, 0.10);\n        if (this.strayMs > this.strayMax) {\n          this.finish(false);\n          return;\n        }\n      }\n      this.updateInfo();\n    }\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private generatePath(W: number, H: number, complexity: number) {\n    // generate smooth polyline from left to right with random vertical wiggle\n    const marginX = 40, marginY = Math.floor(H * 0.22), usableY = H - marginY - 40;\n    const pts: P[] = [];\n    for (let i = 0; i <= complexity; i++) {\n      const x = marginX + (i / complexity) * (W - marginX * 2);\n      const yBase = H / 2;\n      const amp = usableY * 0.35;\n      const y = yBase + (Math.sin(i * 1.2) + (Math.random() - 0.5) * 1.0) * amp * (i === 0 || i === complexity ? 0.4 : 1.0);\n      pts.push({ x, y });\n    }\n    // resample into dense points\n    const dense: P[] = [];\n    const step = 6; // px target between samples\n    for (let i = 0; i < pts.length - 1; i++) {\n      const a = pts[i], b = pts[i + 1];\n      const dx = b.x - a.x, dy = b.y - a.y;\n      const len = Math.sqrt(dx*dx + dy*dy);\n      const n = Math.max(1, Math.round(len / step));\n      for (let j = 0; j < n; j++) {\n        const t = j / n;\n        dense.push({ x: a.x + dx * t, y: a.y + dy * t });\n      }\n    }\n    dense.push(pts[pts.length - 1]);\n    // cache distances\n    for (let i = 1; i < dense.length; i++) {\n      const dx = dense[i].x - dense[i-1].x;\n      const dy = dense[i].y - dense[i-1].y;\n      dense[i].d = Math.sqrt(dx*dx + dy*dy);\n    }\n    return dense;\n  }\n\n  private drawPath() {\n    const g = this.pathG;\n    g.clear();\n    g.lineStyle(6, this.colors.path, 0.8);\n    if (this.path.length === 0) return;\n    g.moveTo(this.path[0].x, this.path[0].y);\n    for (let i = 1; i < this.path.length; i++) g.lineTo(this.path[i].x, this.path[i].y);\n  }\n\n  private drawAnimal(x: number, y: number) {\n    const g = this.animalG;\n    g.clear();\n    // body\n    g.beginFill(this.colors.animal, 1);\n    g.drawCircle(0, 0, this.animalR);\n    g.endFill();\n    // ear\n    g.beginFill(0x111111, 0.9);\n    g.drawCircle(this.animalR * 0.35, -this.animalR * 0.65, this.animalR * 0.28);\n    g.endFill();\n    // eye\n    g.beginFill(0x111111, 0.9);\n    g.drawCircle(this.animalR * 0.35, -this.animalR * 0.10, this.animalR * 0.12);\n    g.endFill();\n    g.x = x; g.y = y;\n  }\n\n  private advanceAlongPath(stepPix: number) {\n    if (this.path.length < 2) return;\n    let need = stepPix;\n    while (need > 0 && this.pathIdx < this.path.length - 1) {\n      const seg = this.path[this.pathIdx + 1];\n      const d = seg.d || 0;\n      if (d <= need) {\n        need -= d;\n        this.pathIdx++;\n      } else {\n        // interpolate within this segment\n        const cur = this.path[this.pathIdx];\n        const nx = cur.x + (seg.x - cur.x) * (need / d);\n        const ny = cur.y + (seg.y - cur.y) * (need / d);\n        this.drawAnimal(nx, ny);\n        return;\n      }\n    }\n    // reached or passed the end\n    const last = this.path[this.path.length - 1];\n    this.drawAnimal(last.x, last.y);\n    // loop back to start for continuous chase\n    if (this.pathIdx >= this.path.length - 1) this.pathIdx = 0;\n  }\n\n  private onDown(e: FederatedPointerEvent) {\n    if (this.finished) return;\n    const p = this.scene.toLocal(e.global);\n    this.pointerDown = true;\n    this.ptrX = p.x; this.ptrY = p.y;\n    this.renderPointerDot();\n  }\n\n  private onMove(e: FederatedPointerEvent) {\n    if (this.finished) return;\n    const p = this.scene.toLocal(e.global);\n    this.ptrX = p.x; this.ptrY = p.y;\n    if (this.pointerDown) this.renderPointerDot();\n  }\n\n  private onUp() {\n    if (this.finished) return;\n    this.pointerDown = false;\n    this.pointerDot.alpha = 0;\n  }\n\n  private renderPointerDot() {\n    const g = this.pointerDot;\n    g.clear();\n    g.beginFill(this.colors.halo, 0.8);\n    g.drawCircle(this.ptrX, this.ptrY, 6);\n    g.endFill();\n    g.alpha = 1;\n  }\n\n  private flashRing(x: number, y: number, color: number, R: number, alpha = 0.18) {\n    const g = new Graphics();\n    g.beginFill(color, alpha);\n    g.drawCircle(0, 0, R);\n    g.endFill();\n    g.x = x; g.y = y;\n    this.scene.addChild(g);\n    const steps = 8;\n    for (let i = 1; i <= steps; i++) {\n      setTimeout(() => { g.alpha = Math.max(0, alpha * (1 - i/steps)); if (i === steps) this.scene.removeChild(g); }, i * 30);\n    }\n  }\n\n  private updateInfo() {\n    const remainS = Math.ceil(this.remainMs / 1000);\n    const chasedS = Math.floor(this.chasedMs / 1000);\n    const targetS = Math.floor(this.targetChase / 1000);\n    this.infoText.text = `Chase ${chasedS}/${targetS}s   Time ${remainS}s`;\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 8);\n    const chaseBonus = Math.round(this.chasedMs / 20);\n    const strayPenalty = Math.round(this.strayMs / 15);\n    const score = Math.max(0, this.score + timeBonus + chaseBonus - strayPenalty + (success ? 700 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","secondsToMs","s","fallbackMs","clamp","x","lo","hi","AnimalChaseGame","GameTemplate","app","__publicField","Container","diff","W","H","complexity","hidePath","bg","Graphics","Text","_e","deltaTime","dtMs","dt","stepPix","ax","ay","dx","dy","result","_a","marginY","usableY","pts","i","yBase","amp","y","dense","step","a","b","len","n","j","t","g","need","seg","d","cur","nx","ny","last","e","p","color","R","alpha","steps","remainS","chasedS","targetS","success","timeBonus","chaseBonus","strayPenalty","score"],"mappings":"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"}