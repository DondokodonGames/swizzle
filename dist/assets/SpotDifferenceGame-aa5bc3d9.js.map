{"version":3,"file":"SpotDifferenceGame-aa5bc3d9.js","sources":["../../src/game-engine/SpotDifferenceGame.ts"],"sourcesContent":["// SpotDifferenceGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'spot_difference' in your factory/registry.\n//\n// Gameplay:\n// - Two panels (left/right) show similar pictures with N differences.\n// - Tap a difference area on either side to mark it found.\n// - Find all differences before time runs out to succeed.\n//\n// Compatibility constraints:\n// - Do NOT narrow base types; import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty/timerText.\n// - Use an internal `finished` flag (avoid assuming a specific GameState union).\n// - Emit results via onGameEnd(success, score).\nimport { Application, Container, Graphics, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\nexport interface SpotDifferenceSettings extends GameSettings {\n  differences?: number;   // how many differences to generate (default by difficulty)\n  allowMiss?: boolean;    // if false, wrong taps briefly penalize (default true)\n}\n\nfunction isDifficulty(v: unknown): v is Difficulty {\n  return v === 'easy' || v === 'normal' || v === 'hard';\n}\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\n\ntype DiffHit = {\n  // normalized center (0..1 in panel-local coords) and radius\n  cx: number; cy: number; r: number;\n  found: boolean;\n  // references to marker graphics (for both panels)\n  leftMark?: Graphics;\n  rightMark?: Graphics;\n};\n\nexport class SpotDifferenceGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private leftPanel = new Container();\n  private rightPanel = new Container();\n\n  private finished = false;\n  private remainMs = 30_000;\n\n  private diffs: DiffHit[] = [];\n  private goals = 5;\n  private found = 0;\n  private allowMiss = true;\n\n  // layout\n  private pad = 20;\n  private panelW = 400;\n  private panelH = 260;\n\n  constructor(app: Application, settings: SpotDifferenceSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as SpotDifferenceSettings;\n    const diff = getDifficulty(s);\n\n    // duration & difficulty params\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n    if (diff === 'easy') this.goals = 5;\n    else if (diff === 'hard') this.goals = 7;\n    else this.goals = 6;\n    if (typeof s.differences === 'number' && isFinite(s.differences)) {\n      this.goals = clamp(Math.round(s.differences), 3, 10);\n    }\n    this.allowMiss = (typeof s.allowMiss === 'boolean') ? s.allowMiss : true;\n\n    // layout\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n    this.panelW = Math.max(260, Math.min(460, Math.floor((W - this.pad * 3) / 2)));\n    this.panelH = Math.max(200, Math.min(360, Math.floor(H - this.pad * 2)));\n    const leftX = this.pad + this.panelW / 2;\n    const rightX = this.pad * 2 + this.panelW + this.panelW / 2;\n    const centerY = H / 2;\n\n    // interactive scene\n    this.scene.eventMode = 'static';\n    this.scene.on('pointertap', (e: FederatedPointerEvent) => this.onTap(e));\n\n    // build panels\n    this.leftPanel.x = leftX; this.leftPanel.y = centerY;\n    this.rightPanel.x = rightX; this.rightPanel.y = centerY;\n    this.scene.addChild(this.leftPanel, this.rightPanel);\n\n    // draw backgrounds\n    this.drawPanelFrame(this.leftPanel, 0x0ea5e9, 0x012a4a);\n    this.drawPanelFrame(this.rightPanel, 0x0ea5e9, 0x012a4a);\n\n    // generate base shapes and differences\n    this.generatePictures();\n\n    this.container.addChild(this.scene);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(false);\n      return;\n    }\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private drawPanelFrame(panel: Container, tintTop: number, tintBottom: number) {\n    const g = new Graphics();\n    // border\n    g.lineStyle(4, 0xffffff, 0.9);\n    g.beginFill(0x000000, 0.18);\n    g.drawRoundedRect(-this.panelW/2, -this.panelH/2, this.panelW, this.panelH, 16);\n    g.endFill();\n    panel.addChild(g);\n  }\n\n  private generatePictures() {\n    // Draw identical base art into both panels, then introduce differences into right panel.\n    const baseLeft = new Graphics();\n    const baseRight = new Graphics();\n    this.drawBaseScene(baseLeft);\n    this.drawBaseScene(baseRight);\n\n    // differences: randomly add or tweak shapes on right only; also record hit regions\n    this.diffs = [];\n    for (let i = 0; i < this.goals; i++) {\n      const d = this.createOneDifference(baseRight);\n      this.diffs.push(d);\n    }\n\n    this.leftPanel.addChild(baseLeft);\n    this.rightPanel.addChild(baseRight);\n\n    // create invisible hit areas for each diff on BOTH panels so a tap either side counts\n    for (const d of this.diffs) {\n      const l = new Graphics();\n      const r = new Graphics();\n      l.beginFill(0xffffff, 0.001);\n      l.drawCircle(this.localX(d.cx, true), this.localY(d.cy), d.r * this.panelW);\n      l.endFill();\n      r.beginFill(0xffffff, 0.001);\n      r.drawCircle(this.localX(d.cx, false), this.localY(d.cy), d.r * this.panelW);\n      r.endFill();\n      l.eventMode = 'static'; r.eventMode = 'static';\n      // store for marking later\n      d.leftMark = new Graphics(); d.rightMark = new Graphics();\n      this.leftPanel.addChild(l, d.leftMark);\n      this.rightPanel.addChild(r, d.rightMark);\n\n      // attach metadata\n      (l as any).__diff__ = d;\n      (r as any).__diff__ = d;\n    }\n\n    // global miss overlay (feedback)\n    const miss = new Graphics();\n    miss.beginFill(0xff5a5a, 0.0);\n    miss.drawRoundedRect(-this.panelW/2, -this.panelH/2, this.panelW, this.panelH, 16);\n    miss.endFill();\n    miss.name = 'missOverlay';\n    this.leftPanel.addChild(miss);\n    const miss2 = miss.clone();\n    this.rightPanel.addChild(miss2);\n  }\n\n  private drawBaseScene(g: Graphics) {\n    const W = this.panelW, H = this.panelH;\n\n    // sky\n    g.beginFill(0x87ceeb, 1); g.drawRoundedRect(-W/2 + 6, -H/2 + 6, W - 12, H - 12, 12); g.endFill();\n\n    // hills\n    g.beginFill(0x2a9d8f, 1);\n    g.drawEllipse(-W*0.15,  H*0.35, W*0.45, H*0.25);\n    g.drawEllipse( W*0.25,  H*0.32, W*0.55, H*0.28);\n    g.endFill();\n\n    // sun\n    g.beginFill(0xffe08a, 1); g.drawCircle(W*0.28, -H*0.25, Math.min(W,H)*0.08); g.endFill();\n\n    // house\n    const houseX = -W*0.18, houseY = H*0.10, hw = W*0.22, hh = H*0.18;\n    g.beginFill(0xffc6a5, 1); g.drawRoundedRect(houseX - hw/2, houseY - hh/2, hw, hh, 10); g.endFill();\n    // roof\n    g.beginFill(0x9d4edd, 1);\n    g.moveTo(houseX - hw/2 - 8, houseY - hh/2);\n    g.lineTo(houseX, houseY - hh/2 - hh*0.55);\n    g.lineTo(houseX + hw/2 + 8, houseY - hh/2);\n    g.lineTo(houseX - hw/2 - 8, houseY - hh/2);\n    g.endFill();\n\n    // tree\n    const tx = W*0.05, ty = H*0.15;\n    g.beginFill(0x8d5524, 1); g.drawRoundedRect(tx-8, ty, 16, H*0.18, 6); g.endFill();\n    g.beginFill(0x2a9d8f, 1); g.drawCircle(tx, ty, H*0.14); g.endFill();\n\n    // clouds\n    g.beginFill(0xffffff, 1);\n    g.drawCircle(-W*0.28, -H*0.28, H*0.05);\n    g.drawCircle(-W*0.24, -H*0.26, H*0.06);\n    g.drawCircle(-W*0.20, -H*0.29, H*0.04);\n    g.endFill();\n  }\n\n  private createOneDifference(baseRight: Graphics): DiffHit {\n    // pick a random type of difference and area\n    const cx = Math.random() * 0.75 + 0.125;   // avoid extreme borders\n    const cy = Math.random() * 0.70 + 0.15;\n    const r = Math.random() * 0.05 + 0.035;    // relative radius\n\n    // randomly alter the right panel drawing in that area (extra shape or color patch)\n    const g = new Graphics();\n    const px = this.localX(cx, false);\n    const py = this.localY(cy);\n    const R = r * this.panelW;\n    const t = Math.random();\n    if (t < 0.33) {\n      // add extra star-like flower\n      g.beginFill(0xfff1a6, 1);\n      for (let i = 0; i < 8; i++) {\n        const a = (i / 8) * Math.PI * 2;\n        const x = px + Math.cos(a) * R * (i % 2 === 0 ? 0.8 : 0.3);\n        const y = py + Math.sin(a) * R * (i % 2 === 0 ? 0.8 : 0.3);\n        if (i === 0) g.moveTo(x, y); else g.lineTo(x, y);\n      }\n      g.closePath(); g.endFill();\n    } else if (t < 0.66) {\n      // paint a colored patch\n      g.beginFill(0xe76f51, 0.9);\n      g.drawRoundedRect(px - R*0.8, py - R*0.5, R*1.6, R*1.0, R*0.3);\n      g.endFill();\n    } else {\n      // draw a ring\n      g.lineStyle(Math.max(2, R*0.15), 0x264653, 1);\n      g.drawCircle(px, py, R*0.8);\n    }\n    baseRight.addChild(g);\n\n    return { cx, cy, r, found: false };\n  }\n\n  private onTap(e: FederatedPointerEvent) {\n    if (this.finished) return;\n    const global = e.global;\n    // transform global to panel-local for both panels\n    const localL = this.leftPanel.toLocal(global);\n    const localR = this.rightPanel.toLocal(global);\n    const hitOnLeft = this.pointInsidePanel(localL.x, localL.y);\n    const hitOnRight = this.pointInsidePanel(localR.x, localR.y);\n    let hitAny = false;\n    if (hitOnLeft) hitAny = this.tryHit(localL.x, localL.y, true) || hitAny;\n    if (hitOnRight) hitAny = this.tryHit(localR.x, localR.y, false) || hitAny;\n\n    if (!hitAny && !this.allowMiss) {\n      // brief red flash on both panels\n      this.flashMiss(this.leftPanel);\n      this.flashMiss(this.rightPanel);\n    }\n  }\n\n  private pointInsidePanel(x: number, y: number) {\n    return Math.abs(x) <= this.panelW/2 && Math.abs(y) <= this.panelH/2;\n  }\n\n  private tryHit(xLocal: number, yLocal: number, isLeft: boolean) {\n    // convert to normalized\n    const cx = (xLocal + this.panelW/2) / this.panelW;\n    const cy = (yLocal + this.panelH/2) / this.panelH;\n    for (const d of this.diffs) {\n      if (d.found) continue;\n      const dx = this.localX(d.cx, true) - xLocal; // use left-panel mapping for distance (radius is relative to W)\n      const dy = this.localY(d.cy) - yLocal;\n      const rr = d.r * this.panelW;\n      if (dx*dx + dy*dy <= rr*rr) {\n        this.markFound(d);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private markFound(d: DiffHit) {\n    d.found = true;\n    this.found++;\n\n    const drawMark = (panel: 'left' | 'right') => {\n      const mark = (panel === 'left' ? d.leftMark! : d.rightMark!);\n      const x = this.localX(d.cx, panel === 'left');\n      const y = this.localY(d.cy);\n      const r = d.r * this.panelW;\n      mark.clear();\n      mark.lineStyle(Math.max(3, r*0.18), 0x00ff88, 0.9);\n      mark.drawCircle(x, y, r * 0.9);\n      // cross\n      mark.lineStyle(Math.max(3, r*0.12), 0xffffff, 0.9);\n      mark.moveTo(x - r*0.6, y - r*0.0);\n      mark.lineTo(x + r*0.6, y + r*0.0);\n      mark.moveTo(x, y - r*0.6);\n      mark.lineTo(x, y + r*0.6);\n    };\n    drawMark('left');\n    drawMark('right');\n\n    if (this.found >= this.goals) {\n      this.finish(true);\n    }\n  }\n\n  private flashMiss(panel: Container) {\n    const overlay = panel.getChildByName('missOverlay') as Graphics | undefined;\n    if (!overlay) return;\n    overlay.alpha = 0.35;\n    // simple fade-out using requestAnimationFrame-ish via Pixi ticker through updateGame not guaranteed here,\n    // so just setTimeout chain for simplicity:\n    const steps = 6;\n    for (let i = 1; i <= steps; i++) {\n      setTimeout(() => { overlay.alpha = Math.max(0, 0.35 * (1 - i/steps)); }, i * 40);\n    }\n  }\n\n  private localX(normX: number, isLeft: boolean) {\n    // map normalized [0..1] to panel local coords (-W/2 .. +W/2)\n    return -this.panelW/2 + normX * this.panelW;\n    // identical for both panels; difference content is on right only\n  }\n  private localY(normY: number) {\n    return -this.panelH/2 + normY * this.panelH;\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 10);\n    const score = Math.max(0, this.found * 400 + timeBonus + (success ? 800 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","secondsToMs","s","fallbackMs","clamp","x","lo","hi","SpotDifferenceGame","GameTemplate","app","__publicField","Container","diff","W","H","leftX","rightX","centerY","e","_e","deltaTime","dtMs","result","_a","panel","tintTop","tintBottom","g","Graphics","baseLeft","baseRight","i","l","r","miss","miss2","houseX","houseY","hw","hh","tx","ty","cx","cy","px","py","R","t","a","y","global","localL","localR","hitOnLeft","hitOnRight","hitAny","xLocal","yLocal","isLeft","dx","dy","rr","drawMark","mark","overlay","steps","normX","normY","success","timeBonus","score"],"mappings":"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"}