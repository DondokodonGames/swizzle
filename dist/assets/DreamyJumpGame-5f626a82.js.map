{"version":3,"file":"DreamyJumpGame-5f626a82.js","sources":["../../src/game-engine/DreamyJumpGame.ts"],"sourcesContent":["// DreamyJumpGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'dreamy_jump' in your factory/registry.\n//\n// Gameplay:\n// - Vertical jumper. Land on clouds to bounce upward and keep ascending.\n// - Tap LEFT/RIGHT half to nudge horizontal movement.\n// - Survive (don't fall off-screen) until the timer ends to clear.\n//\n// Project compatibility notes:\n// - Do NOT narrow base types; import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty/timerText.\n// - Use an internal `finished` flag (avoid relying on a specific GameState union).\n// - Emit results via `onGameEnd(success, score)`.\nimport { Application, Container, Graphics, Text, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface DreamyJumpSettings extends GameSettings {\n  gravity?: number;         // px/s^2\n  jumpVel?: number;         // px/s (upward, positive number)\n  moveSpeed?: number;       // px/s horizontal speed\n  cloudGapY?: number;       // average vertical gap between clouds\n  wrapHorizontal?: boolean; // wrap from left to right edges\n  palette?: 'dawn' | 'twilight' | 'night';\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty {\n  return v === 'easy' || v === 'normal' || v === 'hard';\n}\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\n\ntype Cloud = {\n  g: Graphics;\n  x: number;   // world center x\n  y: number;   // world center y\n  w: number;\n  h: number;\n};\n\nexport class DreamyJumpGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private finished = false;\n  private remainMs = 30_000;\n\n  // camera/world\n  private cameraY = 0;\n\n  // player\n  private player!: Graphics;\n  private px = 0; private py = 0; // world pos\n  private pw = 42; private ph = 48;\n  private vx = 0; private vy = 0;\n  private gravity = 1500;\n  private jumpVel = 700;\n  private moveSpeed = 180;\n  private wrap = true;\n\n  // clouds\n  private clouds: Cloud[] = [];\n  private cloudGapY = 120;\n  private cloudW = 120; private cloudH = 28;\n  private topSpawnY = 0;\n  private bottomCullY = 0;\n\n  // scoring / progress\n  private maxHeight = 0; // lowest py value (higher up is smaller y)\n  private bounces = 0;\n  private score = 0;\n\n  // UI\n  private infoText!: Text;\n\n  // colors\n  private colors = {\n    bgTop: 0xffd6a5, bgBottom: 0xf15bb5, // dawn default\n    cloud: 0xffffff,\n    player: 0xffffff,\n    good: 0x92e6a7, bad: 0xff5a5a,\n    text: 0xffffff, deco: 0x94a3b8,\n  };\n\n  constructor(app: Application, settings: DreamyJumpSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as DreamyJumpSettings;\n    const diff = getDifficulty(s);\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // duration\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n\n    // difficulty presets\n    if (diff === 'easy')       { this.gravity = 1450; this.jumpVel = 680; this.moveSpeed = 170; this.cloudGapY = 130; this.wrap = true; }\n    else if (diff === 'hard')  { this.gravity = 1600; this.jumpVel = 720; this.moveSpeed = 200; this.cloudGapY = 110; this.wrap = false; }\n    else                       { this.gravity = 1500; this.jumpVel = 700; this.moveSpeed = 180; this.cloudGapY = 120; this.wrap = true; }\n\n    // overrides\n    if (typeof s.gravity === 'number' && isFinite(s.gravity)) this.gravity = clamp(s.gravity, 900, 2400);\n    if (typeof s.jumpVel === 'number' && isFinite(s.jumpVel)) this.jumpVel = clamp(s.jumpVel, 480, 1000);\n    if (typeof s.moveSpeed === 'number' && isFinite(s.moveSpeed)) this.moveSpeed = clamp(s.moveSpeed, 100, 360);\n    if (typeof s.cloudGapY === 'number' && isFinite(s.cloudGapY)) this.cloudGapY = clamp(s.cloudGapY, 80, 200);\n    if (typeof s.wrapHorizontal === 'boolean') this.wrap = s.wrapHorizontal;\n\n    if (s.palette === 'twilight') {\n      this.colors.bgTop = 0x301934; this.colors.bgBottom = 0x1a0b1e;\n    } else if (s.palette === 'night') {\n      this.colors.bgTop = 0x0b1020; this.colors.bgBottom = 0x151a2b;\n    }\n\n    // background split\n    const bg = new Graphics();\n    bg.beginFill(this.colors.bgTop); bg.drawRect(0, 0, W, Math.floor(H * 0.45)); bg.endFill();\n    bg.beginFill(this.colors.bgBottom); bg.drawRect(0, Math.floor(H * 0.45), W, H); bg.endFill();\n    this.scene.addChild(bg);\n\n    // decorative lines\n    for (let i = 0; i < 5; i++) {\n      const d = new Graphics();\n      d.lineStyle(2, this.colors.deco, 0.25);\n      const x = (i + 1) * (W / 6);\n      d.moveTo(x, 0); d.lineTo(x, H);\n      this.scene.addChild(d);\n    }\n\n    // info\n    this.infoText = new Text('', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.045),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 4,\n    });\n    this.infoText.anchor.set(0.5);\n    this.infoText.x = W / 2; this.infoText.y = Math.floor(H * 0.20);\n    this.scene.addChild(this.infoText);\n    this.updateInfo(0);\n\n    // player init\n    this.pw = Math.min(64, Math.floor(W * 0.08));\n    this.ph = Math.floor(this.pw * 1.15);\n    this.px = W / 2;\n    this.py = H - 80; // world coords start near bottom\n    this.vx = 0; this.vy = 0;\n    this.cameraY = 0;\n    this.maxHeight = this.py;\n\n    this.player = new Graphics();\n    this.drawPlayer();\n    this.scene.addChild(this.player);\n\n    // initial clouds\n    this.cloudW = Math.min(140, Math.floor(W * 0.34));\n    this.cloudH = Math.max(22, Math.floor(this.cloudW * 0.22));\n    this.topSpawnY = this.py - 40;\n    this.bottomCullY = this.py + H + 100;\n\n    // ground cloud platform\n    this.spawnCloud(W/2, this.py + 30, this.cloudW * 1.2);\n\n    // fill upward\n    while (this.topSpawnY > this.py - H * 1.5) {\n      this.spawnNextAbove();\n    }\n\n    // input: left/right tap\n    this.scene.eventMode = 'static';\n    this.scene.on('pointertap', (e: FederatedPointerEvent) => {\n      const x = e.global.x;\n      if (x < W / 2) this.vx = -this.moveSpeed;\n      else this.vx = this.moveSpeed;\n    });\n\n    this.container.addChild(this.scene);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n    const dt = dtMs / 1000;\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // time\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(true);\n      return;\n    }\n\n    // physics\n    this.vy += this.gravity * dt;\n    this.py += this.vy * dt;\n    this.px += this.vx * dt;\n\n    // wrap/edges\n    if (this.wrap) {\n      if (this.px < -this.pw/2) this.px = W + this.pw/2;\n      if (this.px > W + this.pw/2) this.px = -this.pw/2;\n    } else {\n      this.px = clamp(this.px, this.pw/2, W - this.pw/2);\n    }\n\n    // collide with clouds only when falling\n    if (this.vy > 0) {\n      const footY = this.py + this.ph/2;\n      for (const c of this.clouds) {\n        const cx = c.x, cy = c.y, cw = c.w, ch = c.h;\n        // AABB broad-phase\n        if (Math.abs(this.px - cx) < (this.pw/2 + cw/2) && Math.abs(footY - cy) < (this.ph/2 + ch/2)) {\n          // ensure coming from above and foot is near top surface\n          const top = cy - ch/2;\n          if (footY >= top - 8 && footY <= top + 14) {\n            // bounce\n            this.py = top - this.ph/2;\n            this.vy = -this.jumpVel * (0.96 + Math.random() * 0.08);\n            this.bounces++;\n            this.score += 40;\n            break;\n          }\n        }\n      }\n    }\n\n    // camera follows upward movement\n    const screenY = this.py - this.cameraY;\n    const targetScreenY = H * 0.42;\n    if (screenY < targetScreenY) {\n      const dy = targetScreenY - screenY;\n      this.cameraY -= dy; // move camera up\n    }\n\n    // update max height & score bonus\n    if (this.py < this.maxHeight) {\n      const gain = this.maxHeight - this.py;\n      this.maxHeight = this.py;\n      this.score += Math.round(gain * 0.1);\n    }\n\n    // spawn new clouds above as camera rises\n    while (this.topSpawnY > this.cameraY - H * 0.5) {\n      this.spawnNextAbove();\n    }\n\n    // cull clouds below\n    const cullBelow = this.cameraY + H + 60;\n    const survivors: Cloud[] = [];\n    for (const c of this.clouds) {\n      if (c.y < cullBelow) survivors.push(c);\n      else this.scene.removeChild(c.g);\n    }\n    this.clouds = survivors;\n\n    // check fail: fell off bottom of screen\n    if (this.py - this.cameraY > H + 40) {\n      this.finish(false);\n      return;\n    }\n\n    // render\n    this.drawPlayer();\n    this.updateInfo(dtMs);\n    this.layoutClouds();\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private updateInfo(_dtMs: number) {\n    const remainS = Math.ceil(this.remainMs / 1000);\n    const height = Math.max(0, Math.round((this.clouds.length > 0 ? (this.clouds[0].y - this.py) : 0) * 0.02) + Math.round((this.maxHeight > 0 ? 0 : -this.maxHeight) * 0.01));\n    this.infoText.text = `Bounces ${this.bounces}   Time ${remainS}s`;\n  }\n\n  private drawPlayer() {\n    const g = this.player;\n    const W = this.app.renderer.width;\n    const H = this.app.renderer.height;\n    const sx = this.px;\n    const sy = this.py - this.cameraY;\n\n    g.clear();\n    // cloud-like \"dreamling\" sprite\n    g.beginFill(this.colors.player, 0.95);\n    g.drawRoundedRect(sx - this.pw/2, sy - this.ph/2, this.pw, this.ph, 12);\n    g.endFill();\n    // eyes\n    g.beginFill(0x111111, 0.9);\n    g.drawCircle(sx - this.pw*0.18, sy - this.ph*0.10, Math.max(2, Math.floor(this.pw*0.07)));\n    g.drawCircle(sx + this.pw*0.10, sy - this.ph*0.12, Math.max(2, Math.floor(this.pw*0.07)));\n    g.endFill();\n  }\n\n  private layoutClouds() {\n    // project world y -> screen y\n    for (const c of this.clouds) {\n      c.g.x = c.x;\n      c.g.y = c.y - this.cameraY;\n    }\n  }\n\n  private spawnNextAbove() {\n    const W = this.app.renderer.width;\n    const nextY = this.topSpawnY - (this.cloudGapY * (0.9 + Math.random() * 0.3));\n    const w = this.cloudW * (0.8 + Math.random() * 0.6);\n    const x = Math.max(w/2 + 10, Math.min(W - w/2 - 10, (Math.random() * W)));\n    this.spawnCloud(x, nextY, w);\n  }\n\n  private spawnCloud(x: number, y: number, w: number) {\n    const h = this.cloudH * (0.9 + Math.random() * 0.3);\n    const g = new Graphics();\n    this.drawCloudShape(g, w, h);\n    this.scene.addChild(g);\n    this.clouds.push({ g, x, y, w, h });\n    this.topSpawnY = Math.min(this.topSpawnY, y);\n  }\n\n  private drawCloudShape(g: Graphics, w: number, h: number) {\n    const r = h * 0.6;\n    g.clear();\n    g.beginFill(this.colors.cloud, 0.96);\n    // three puffs\n    g.drawEllipse(-w/4, 0, w*0.32, h);\n    g.drawEllipse(0, 0, w*0.42, h*1.2);\n    g.drawEllipse(w/4, 0, w*0.32, h);\n    // base\n    g.drawRoundedRect(-w/2, -h/2, w, h, h/2);\n    g.endFill();\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 6);\n    const bounceBonus = this.bounces * 30;\n    const altitudeBonus = Math.max(0, Math.round((-this.maxHeight) * 0.2));\n    const score = Math.max(0, this.score + timeBonus + bounceBonus + altitudeBonus + (success ? 800 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","secondsToMs","s","fallbackMs","clamp","x","lo","hi","DreamyJumpGame","GameTemplate","app","__publicField","Container","diff","W","H","bg","Graphics","i","Text","e","_e","deltaTime","dtMs","dt","footY","c","cx","cy","cw","ch","top","screenY","targetScreenY","dy","gain","cullBelow","survivors","result","_a","_dtMs","remainS","g","sx","sy","nextY","w","y","h","success","timeBonus","bounceBonus","altitudeBonus","score"],"mappings":"qOA6BA,SAASA,EAAaC,EAA6B,CACjD,OAAOA,IAAM,QAAUA,IAAM,UAAYA,IAAM,MACjD,CACA,SAASC,EAAcC,EAAoC,CACzD,MAAMC,EAAKD,EAAiB,WACrB,OAAAH,EAAaI,CAAC,EAAIA,EAAI,QAC/B,CACA,SAASC,EAAYC,EAAuBC,EAAoB,CAC9D,OAAI,OAAOD,GAAM,UAAY,SAASA,CAAC,EAAU,KAAK,IAAI,IAAM,KAAK,MAAMA,EAAI,GAAI,CAAC,EAC7EC,CACT,CACA,SAASC,EAAMC,EAAWC,EAAYC,EAAY,CAAE,OAAO,KAAK,IAAID,EAAI,KAAK,IAAIC,EAAIF,CAAC,CAAC,CAAG,CAUnF,MAAMG,UAAuBC,CAAa,CA4C/C,YAAYC,EAAkBX,EAA8B,CAC1D,MAAMW,EAAKX,CAAQ,EA5CdY,EAAA,kBAECA,EAAA,aAAQ,IAAIC,GACZD,EAAA,gBAAW,IACXA,EAAA,gBAAW,KAGXA,EAAA,eAAU,GAGVA,EAAA,eACAA,EAAA,UAAK,GAAWA,EAAA,UAAK,GACrBA,EAAA,UAAK,IAAYA,EAAA,UAAK,IACtBA,EAAA,UAAK,GAAWA,EAAA,UAAK,GACrBA,EAAA,eAAU,MACVA,EAAA,eAAU,KACVA,EAAA,iBAAY,KACZA,EAAA,YAAO,IAGPA,EAAA,cAAkB,CAAA,GAClBA,EAAA,iBAAY,KACZA,EAAA,cAAS,KAAaA,EAAA,cAAS,IAC/BA,EAAA,iBAAY,GACZA,EAAA,mBAAc,GAGdA,EAAA,iBAAY,GACZA,EAAA,eAAU,GACVA,EAAA,aAAQ,GAGRA,EAAA,iBAGAA,EAAA,cAAS,CACf,MAAO,SAAU,SAAU,SAC3B,MAAO,SACP,OAAQ,SACR,KAAM,QAAU,IAAK,SACrB,KAAM,SAAU,KAAM,OAAA,EAKxB,CAEA,MAAM,aAA6B,CACjC,MAAMT,EAAK,KAAa,SAClBW,EAAOf,EAAcI,CAAC,EACtBY,EAAI,KAAK,IAAI,SAAS,MAAOC,EAAI,KAAK,IAAI,SAAS,OAGzD,KAAK,SAAWd,EAAaC,EAAU,SAAoB,GAAM,EAG7DW,IAAS,QAAgB,KAAK,QAAU,KAAM,KAAK,QAAU,IAAK,KAAK,UAAY,IAAK,KAAK,UAAY,IAAK,KAAK,KAAO,IACrHA,IAAS,QAAW,KAAK,QAAU,KAAM,KAAK,QAAU,IAAK,KAAK,UAAY,IAAK,KAAK,UAAY,IAAK,KAAK,KAAO,KACjG,KAAK,QAAU,KAAM,KAAK,QAAU,IAAK,KAAK,UAAY,IAAK,KAAK,UAAY,IAAK,KAAK,KAAO,IAG1H,OAAOX,EAAE,SAAY,UAAY,SAASA,EAAE,OAAO,IAAG,KAAK,QAAUE,EAAMF,EAAE,QAAS,IAAK,IAAI,GAC/F,OAAOA,EAAE,SAAY,UAAY,SAASA,EAAE,OAAO,IAAG,KAAK,QAAUE,EAAMF,EAAE,QAAS,IAAK,GAAI,GAC/F,OAAOA,EAAE,WAAc,UAAY,SAASA,EAAE,SAAS,IAAG,KAAK,UAAYE,EAAMF,EAAE,UAAW,IAAK,GAAG,GACtG,OAAOA,EAAE,WAAc,UAAY,SAASA,EAAE,SAAS,IAAG,KAAK,UAAYE,EAAMF,EAAE,UAAW,GAAI,GAAG,GACrG,OAAOA,EAAE,gBAAmB,YAAW,KAAK,KAAOA,EAAE,gBAErDA,EAAE,UAAY,YAChB,KAAK,OAAO,MAAQ,QAAU,KAAK,OAAO,SAAW,SAC5CA,EAAE,UAAY,UACvB,KAAK,OAAO,MAAQ,OAAU,KAAK,OAAO,SAAW,SAIjD,MAAAc,EAAK,IAAIC,EACZD,EAAA,UAAU,KAAK,OAAO,KAAK,EAAMA,EAAA,SAAS,EAAG,EAAGF,EAAG,KAAK,MAAMC,EAAI,GAAI,CAAC,EAAGC,EAAG,QAAQ,EACrFA,EAAA,UAAU,KAAK,OAAO,QAAQ,EAAMA,EAAA,SAAS,EAAG,KAAK,MAAMD,EAAI,GAAI,EAAGD,EAAGC,CAAC,EAAGC,EAAG,QAAQ,EACtF,KAAA,MAAM,SAASA,CAAE,EAGtB,QAASE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpB,MAAAlB,EAAI,IAAIiB,EACdjB,EAAE,UAAU,EAAG,KAAK,OAAO,KAAM,GAAI,EAC/B,MAAAK,GAAKa,EAAI,IAAMJ,EAAI,GACvBd,EAAA,OAAOK,EAAG,CAAC,EAAKL,EAAA,OAAOK,EAAGU,CAAC,EACxB,KAAA,MAAM,SAASf,CAAC,CACvB,CAmCA,IAhCK,KAAA,SAAW,IAAImB,EAAK,GAAI,CAC3B,WAAY,aAAc,SAAU,KAAK,MAAM,KAAK,IAAIL,EAAGC,CAAC,EAAI,IAAK,EACrE,KAAM,KAAK,OAAO,KAAM,OAAQ,EAAU,gBAAiB,CAAA,CAC5D,EACI,KAAA,SAAS,OAAO,IAAI,EAAG,EACvB,KAAA,SAAS,EAAID,EAAI,EAAG,KAAK,SAAS,EAAI,KAAK,MAAMC,EAAI,EAAI,EACzD,KAAA,MAAM,SAAS,KAAK,QAAQ,EACjC,KAAK,WAAW,CAAC,EAGZ,KAAA,GAAK,KAAK,IAAI,GAAI,KAAK,MAAMD,EAAI,GAAI,CAAC,EAC3C,KAAK,GAAK,KAAK,MAAM,KAAK,GAAK,IAAI,EACnC,KAAK,GAAKA,EAAI,EACd,KAAK,GAAKC,EAAI,GACd,KAAK,GAAK,EAAG,KAAK,GAAK,EACvB,KAAK,QAAU,EACf,KAAK,UAAY,KAAK,GAEjB,KAAA,OAAS,IAAIE,EAClB,KAAK,WAAW,EACX,KAAA,MAAM,SAAS,KAAK,MAAM,EAG1B,KAAA,OAAS,KAAK,IAAI,IAAK,KAAK,MAAMH,EAAI,GAAI,CAAC,EAC3C,KAAA,OAAS,KAAK,IAAI,GAAI,KAAK,MAAM,KAAK,OAAS,GAAI,CAAC,EACpD,KAAA,UAAY,KAAK,GAAK,GACtB,KAAA,YAAc,KAAK,GAAKC,EAAI,IAG5B,KAAA,WAAWD,EAAE,EAAG,KAAK,GAAK,GAAI,KAAK,OAAS,GAAG,EAG7C,KAAK,UAAY,KAAK,GAAKC,EAAI,KACpC,KAAK,eAAe,EAItB,KAAK,MAAM,UAAY,SACvB,KAAK,MAAM,GAAG,aAAeK,GAA6B,CAC9CA,EAAE,OAAO,EACXN,EAAI,EAAQ,KAAA,GAAK,CAAC,KAAK,UAC1B,KAAK,GAAK,KAAK,SAAA,CACrB,EAEI,KAAA,UAAU,SAAS,KAAK,KAAK,CACpC,CAEA,YAAYO,EAAiC,CAE7C,CAEA,WAAWC,EAAyB,CAClC,GAAI,KAAK,SAAU,OACb,MAAAC,EAAOD,GAAa,IAAO,IAC3BE,EAAKD,EAAO,IACZT,EAAI,KAAK,IAAI,SAAS,MAAOC,EAAI,KAAK,IAAI,SAAS,OAIrD,GADJ,KAAK,UAAYQ,EACb,KAAK,UAAY,EAAG,CACtB,KAAK,SAAW,EAChB,KAAK,OAAO,EAAI,EAChB,MACF,CAgBI,GAbC,KAAA,IAAM,KAAK,QAAUC,EACrB,KAAA,IAAM,KAAK,GAAKA,EAChB,KAAA,IAAM,KAAK,GAAKA,EAGjB,KAAK,MACH,KAAK,GAAK,CAAC,KAAK,GAAG,IAAQ,KAAA,GAAKV,EAAI,KAAK,GAAG,GAC5C,KAAK,GAAKA,EAAI,KAAK,GAAG,IAAQ,KAAA,GAAK,CAAC,KAAK,GAAG,IAE3C,KAAA,GAAKV,EAAM,KAAK,GAAI,KAAK,GAAG,EAAGU,EAAI,KAAK,GAAG,CAAC,EAI/C,KAAK,GAAK,EAAG,CACf,MAAMW,EAAQ,KAAK,GAAK,KAAK,GAAG,EACrB,UAAAC,KAAK,KAAK,OAAQ,CACrB,MAAAC,EAAKD,EAAE,EAAGE,EAAKF,EAAE,EAAGG,EAAKH,EAAE,EAAGI,EAAKJ,EAAE,EAEvC,GAAA,KAAK,IAAI,KAAK,GAAKC,CAAE,EAAK,KAAK,GAAG,EAAIE,EAAG,GAAM,KAAK,IAAIJ,EAAQG,CAAE,EAAK,KAAK,GAAG,EAAIE,EAAG,EAAI,CAEtF,MAAAC,EAAMH,EAAKE,EAAG,EACpB,GAAIL,GAASM,EAAM,GAAKN,GAASM,EAAM,GAAI,CAEpC,KAAA,GAAKA,EAAM,KAAK,GAAG,EACxB,KAAK,GAAK,CAAC,KAAK,SAAW,IAAO,KAAK,SAAW,KAC7C,KAAA,UACL,KAAK,OAAS,GACd,KACF,CACF,CACF,CACF,CAGM,MAAAC,EAAU,KAAK,GAAK,KAAK,QACzBC,EAAgBlB,EAAI,IAC1B,GAAIiB,EAAUC,EAAe,CAC3B,MAAMC,EAAKD,EAAgBD,EAC3B,KAAK,SAAWE,CAClB,CAGI,GAAA,KAAK,GAAK,KAAK,UAAW,CACtB,MAAAC,EAAO,KAAK,UAAY,KAAK,GACnC,KAAK,UAAY,KAAK,GACtB,KAAK,OAAS,KAAK,MAAMA,EAAO,EAAG,CACrC,CAGA,KAAO,KAAK,UAAY,KAAK,QAAUpB,EAAI,IACzC,KAAK,eAAe,EAIhB,MAAAqB,EAAY,KAAK,QAAUrB,EAAI,GAC/BsB,EAAqB,CAAA,EAChB,UAAAX,KAAK,KAAK,OACfA,EAAE,EAAIU,EAAWC,EAAU,KAAKX,CAAC,EAC3B,KAAA,MAAM,YAAYA,EAAE,CAAC,EAKjC,GAHA,KAAK,OAASW,EAGV,KAAK,GAAK,KAAK,QAAUtB,EAAI,GAAI,CACnC,KAAK,OAAO,EAAK,EACjB,MACF,CAGA,KAAK,WAAW,EAChB,KAAK,WAAWQ,CAAI,EACpB,KAAK,aAAa,CACpB,CAEU,WAAWe,EAAmD,QACtEC,EAAA,KAAK,YAAL,MAAAA,EAAA,UAAiBD,EAAO,QAASA,EAAO,MAC1C,CAGQ,WAAWE,EAAe,CAChC,MAAMC,EAAU,KAAK,KAAK,KAAK,SAAW,GAAI,EAC/B,KAAK,IAAI,EAAG,KAAK,OAAO,KAAK,OAAO,OAAS,EAAK,KAAK,OAAO,CAAC,EAAE,EAAI,KAAK,GAAM,GAAK,GAAI,EAAI,KAAK,OAAO,KAAK,UAAY,EAAI,EAAI,CAAC,KAAK,WAAa,GAAI,CAAC,EACzK,KAAK,SAAS,KAAO,WAAW,KAAK,OAAO,WAAWA,CAAO,GAChE,CAEQ,YAAa,CACnB,MAAMC,EAAI,KAAK,OACL,KAAK,IAAI,SAAS,MAClB,KAAK,IAAI,SAAS,OAC5B,MAAMC,EAAK,KAAK,GACVC,EAAK,KAAK,GAAK,KAAK,QAE1BF,EAAE,MAAM,EAERA,EAAE,UAAU,KAAK,OAAO,OAAQ,GAAI,EACpCA,EAAE,gBAAgBC,EAAK,KAAK,GAAG,EAAGC,EAAK,KAAK,GAAG,EAAG,KAAK,GAAI,KAAK,GAAI,EAAE,EACtEF,EAAE,QAAQ,EAERA,EAAA,UAAU,QAAU,EAAG,EACzBA,EAAE,WAAWC,EAAK,KAAK,GAAG,IAAMC,EAAK,KAAK,GAAG,GAAM,KAAK,IAAI,EAAG,KAAK,MAAM,KAAK,GAAG,GAAI,CAAC,CAAC,EACxFF,EAAE,WAAWC,EAAK,KAAK,GAAG,GAAMC,EAAK,KAAK,GAAG,IAAM,KAAK,IAAI,EAAG,KAAK,MAAM,KAAK,GAAG,GAAI,CAAC,CAAC,EACxFF,EAAE,QAAQ,CACZ,CAEQ,cAAe,CAEV,UAAAhB,KAAK,KAAK,OACjBA,EAAA,EAAE,EAAIA,EAAE,EACVA,EAAE,EAAE,EAAIA,EAAE,EAAI,KAAK,OAEvB,CAEQ,gBAAiB,CACjB,MAAAZ,EAAI,KAAK,IAAI,SAAS,MACtB+B,EAAQ,KAAK,UAAa,KAAK,WAAa,GAAM,KAAK,SAAW,IAClEC,EAAI,KAAK,QAAU,GAAM,KAAK,SAAW,IACzCzC,EAAI,KAAK,IAAIyC,EAAE,EAAI,GAAI,KAAK,IAAIhC,EAAIgC,EAAE,EAAI,GAAK,KAAK,OAAO,EAAIhC,CAAE,CAAC,EACnE,KAAA,WAAWT,EAAGwC,EAAOC,CAAC,CAC7B,CAEQ,WAAWzC,EAAW0C,EAAWD,EAAW,CAClD,MAAM,EAAI,KAAK,QAAU,GAAM,KAAK,SAAW,IACzCJ,EAAI,IAAIzB,EACT,KAAA,eAAeyB,EAAGI,EAAG,CAAC,EACtB,KAAA,MAAM,SAASJ,CAAC,EAChB,KAAA,OAAO,KAAK,CAAE,EAAAA,EAAG,EAAArC,EAAG,EAAA0C,EAAG,EAAAD,EAAG,EAAG,EAClC,KAAK,UAAY,KAAK,IAAI,KAAK,UAAWC,CAAC,CAC7C,CAEQ,eAAeL,EAAaI,EAAWE,EAAW,CAExDN,EAAE,MAAM,EACRA,EAAE,UAAU,KAAK,OAAO,MAAO,GAAI,EAEnCA,EAAE,YAAY,CAACI,EAAE,EAAG,EAAGA,EAAE,IAAME,CAAC,EAChCN,EAAE,YAAY,EAAG,EAAGI,EAAE,IAAME,EAAE,GAAG,EACjCN,EAAE,YAAYI,EAAE,EAAG,EAAGA,EAAE,IAAME,CAAC,EAE7BN,EAAA,gBAAgB,CAACI,EAAE,EAAG,CAACE,EAAE,EAAGF,EAAGE,EAAGA,EAAE,CAAC,EACvCN,EAAE,QAAQ,CACZ,CAEQ,OAAOO,EAAkB,OAC/B,GAAI,KAAK,SAAU,OACnB,KAAK,SAAW,GAChB,MAAMC,EAAY,KAAK,MAAM,KAAK,SAAW,CAAC,EACxCC,EAAc,KAAK,QAAU,GAC7BC,EAAgB,KAAK,IAAI,EAAG,KAAK,MAAO,CAAC,KAAK,UAAa,EAAG,CAAC,EAC/DC,EAAQ,KAAK,IAAI,EAAG,KAAK,MAAQH,EAAYC,EAAcC,GAAiBH,EAAU,IAAM,EAAE,GAC/FV,EAAA,KAAA,YAAA,MAAAA,EAAA,UAAYU,EAASI,EAC5B,CACF"}