{"version":3,"file":"PuzzlePrincessGame-ed5781ee.js","sources":["../../src/game-engine/PuzzlePrincessGame.ts"],"sourcesContent":["// PuzzlePrincessGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'puzzle_princess' in your factory/registry.\n//\n// Gameplay:\n// - A \"princess\" illustration is split into a grid of tiles.\n// - Tap two tiles to swap them. Complete the picture before time runs out to clear.\n//\n// Project compatibility notes:\n// - Do NOT narrow base types; import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty/timerText.\n// - Use an internal `finished` flag (avoid relying on a specific GameState union).\n// - Emit results via `onGameEnd(success, score)`.\nimport { Application, Container, Graphics, Text, Sprite, Texture, Rectangle, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface PuzzlePrincessSettings extends GameSettings {\n  grid?: number;          // grid size (2..5). default by difficulty: easy=2, normal=3, hard=4\n  showPreview?: boolean;  // show small preview above\n  palette?: 'royal' | 'twilight' | 'forest';\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty { return v === 'easy' || v === 'normal' || v === 'hard'; }\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\nfunction shuffle<T>(arr: T[]) { for (let i = arr.length - 1; i > 0; i--) { const j = (Math.random() * (i + 1)) | 0; [arr[i], arr[j]] = [arr[j], arr[i]]; } return arr; }\n\ntype Tile = {\n  sprite: Sprite;\n  index: number;   // current tile index (0..n-1)\n  correct: number; // correct index\n  x0: number;      // grid x slot center\n  y0: number;      // grid y slot center\n};\n\nexport class PuzzlePrincessGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private finished = false;\n  private remainMs = 30_000;\n\n  // layout\n  private grid = 3;\n  private gridW = 480;\n  private gridH = 480;\n  private tileW = 120;\n  private tileH = 120;\n  private tiles: Tile[] = [];\n  private boardX = 0;\n  private boardY = 0;\n\n  // selection\n  private selA: Tile | null = null;\n  private selBox!: Graphics;\n\n  // art\n  private artTex!: Texture;\n  private artW = 480;\n  private artH = 480;\n  private preview!: Sprite;\n\n  // scoring\n  private moves = 0;\n  private score = 0;\n\n  // colors\n  private colors = {\n    bgTop: 0x301934, bgBottom: 0x1a0b1e, // twilight default\n    frame: 0xf8c7ff, lines: 0xffffff,\n    select: 0xffe08a,\n    text: 0xffffff,\n  };\n\n  constructor(app: Application, settings: PuzzlePrincessSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as PuzzlePrincessSettings;\n    const diff = getDifficulty(s);\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // duration\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n\n    // difficulty defaults\n    if (diff === 'easy') this.grid = 2;\n    else if (diff === 'hard') this.grid = 4;\n    else this.grid = 3;\n    if (typeof s.grid === 'number' && isFinite(s.grid)) this.grid = clamp(Math.round(s.grid), 2, 5);\n    const showPreview = (s.showPreview ?? true);\n\n    if (s.palette === 'royal') {\n      this.colors.bgTop = 0x4c1d95; this.colors.bgBottom = 0x2e1065; this.colors.frame = 0xfcd34d;\n    } else if (s.palette === 'forest') {\n      this.colors.bgTop = 0x14532d; this.colors.bgBottom = 0x052e16; this.colors.frame = 0x34d399;\n    }\n\n    // background split\n    const bg = new Graphics();\n    bg.beginFill(this.colors.bgTop); bg.drawRect(0, 0, W, Math.floor(H * 0.45)); bg.endFill();\n    bg.beginFill(this.colors.bgBottom); bg.drawRect(0, Math.floor(H * 0.45), W, H); bg.endFill();\n    this.scene.addChild(bg);\n\n    // compute board size\n    this.gridW = Math.min(Math.floor(W * 0.86), Math.floor(H * 0.52));\n    this.gridH = this.gridW;\n    this.tileW = Math.floor(this.gridW / this.grid);\n    this.tileH = Math.floor(this.gridH / this.grid);\n    this.boardX = Math.floor((W - this.gridW) / 2);\n    this.boardY = Math.floor(H * 0.40);\n\n    // title\n    const title = new Text('Puzzle Princess', {\n      fontFamily: 'serif', fontSize: Math.floor(Math.min(W, H) * 0.06),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 5,\n    });\n    title.anchor.set(0.5);\n    title.x = W / 2; title.y = Math.floor(H * 0.18);\n    this.scene.addChild(title);\n\n    // generate princess artwork texture\n    this.artW = this.gridW; this.artH = this.gridH;\n    this.artTex = this.generatePrincessTexture(this.artW, this.artH);\n\n    // preview\n    if (showPreview) {\n      this.preview = new Sprite(new Texture(this.artTex.baseTexture, new Rectangle(0,0,this.artW,this.artH)));\n      const scale = Math.min(0.25, Math.min((W*0.32)/this.artW, (H*0.18)/this.artH));\n      this.preview.scale.set(scale);\n      this.preview.x = Math.floor(W/2 - (this.preview.width/2));\n      this.preview.y = Math.floor(this.boardY - this.preview.height - 20);\n      this.scene.addChild(this.preview);\n    }\n\n    // board frame\n    const frame = new Graphics();\n    frame.lineStyle(6, this.colors.frame, 0.95);\n    frame.drawRoundedRect(this.boardX - 6, this.boardY - 6, this.gridW + 12, this.gridH + 12, 16);\n    frame.endFill();\n    this.scene.addChild(frame);\n\n    // grid lines\n    const lines = new Graphics();\n    lines.lineStyle(2, this.colors.lines, 0.35);\n    for (let i = 1; i < this.grid; i++) {\n      const x = this.boardX + i * this.tileW;\n      const y = this.boardY + i * this.tileH;\n      lines.moveTo(x, this.boardY); lines.lineTo(x, this.boardY + this.gridH);\n      lines.moveTo(this.boardX, y); lines.lineTo(this.boardX + this.gridW, y);\n    }\n    this.scene.addChild(lines);\n\n    // tiles (shuffled)\n    const order = shuffle(Array.from({ length: this.grid * this.grid }, (_, i) => i));\n    // Ensure not already solved\n    let isSolved = order.every((v, i) => v === i);\n    if (isSolved && order.length > 1) [order[0], order[1]] = [order[1], order[0]];\n\n    for (let idx = 0; idx < order.length; idx++) {\n      const correct = idx;\n      const current = order[idx];\n      const col = idx % this.grid, row = Math.floor(idx / this.grid);\n      const x0 = this.boardX + col * this.tileW + this.tileW / 2;\n      const y0 = this.boardY + row * this.tileH + this.tileH / 2;\n\n      const frameRect = new Rectangle(\n        (current % this.grid) * this.tileW,\n        Math.floor(current / this.grid) * this.tileH,\n        this.tileW, this.tileH\n      );\n      const subTexture = new Texture(this.artTex.baseTexture, frameRect);\n      const spr = new Sprite(subTexture);\n      spr.anchor.set(0.5);\n      spr.x = x0; spr.y = y0;\n      spr.eventMode = 'static';\n      spr.on('pointertap', (e: FederatedPointerEvent) => { e.stopPropagation(); this.onTapTile(tile); });\n\n      const tile: Tile = { sprite: spr, index: current, correct, x0, y0 };\n      (spr as any).__tile__ = tile;\n      this.tiles.push(tile);\n      this.scene.addChild(spr);\n    }\n\n    // selection box\n    this.selBox = new Graphics();\n    this.selBox.visible = false;\n    this.scene.addChild(this.selBox);\n\n    this.container.addChild(this.scene);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(false);\n      return;\n    }\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private onTapTile(tile: Tile) {\n    if (this.finished) return;\n    if (!this.selA) {\n      this.selA = tile;\n      this.drawSelection(tile);\n      return;\n    }\n    if (this.selA === tile) {\n      // deselect\n      this.selA = null;\n      this.selBox.visible = false;\n      return;\n    }\n    // swap contents (update sprites' textures and index fields)\n    this.swapTiles(this.selA, tile);\n    this.moves++;\n    this.selA = null;\n    this.selBox.visible = false;\n\n    if (this.isSolved()) {\n      this.finish(true);\n    }\n  }\n\n  private drawSelection(tile: Tile) {\n    this.selBox.clear();\n    this.selBox.lineStyle(6, this.colors.select, 0.95);\n    this.selBox.drawRoundedRect(\n      tile.sprite.x - this.tileW/2 - 4,\n      tile.sprite.y - this.tileH/2 - 4,\n      this.tileW + 8, this.tileH + 8, 12\n    );\n    this.selBox.endFill();\n    this.selBox.visible = true;\n  }\n\n  private swapTiles(a: Tile, b: Tile) {\n    // swap index (which defines which sub-rect of the texture is used)\n    const ai = a.index, bi = b.index;\n    if (ai === bi) return;\n\n    a.index = bi; b.index = ai;\n\n    const rectA = new Rectangle(\n      (a.index % this.grid) * this.tileW,\n      Math.floor(a.index / this.grid) * this.tileH,\n      this.tileW, this.tileH\n    );\n    const rectB = new Rectangle(\n      (b.index % this.grid) * this.tileW,\n      Math.floor(b.index / this.grid) * this.tileH,\n      this.tileW, this.tileH\n    );\n    a.sprite.texture = new Texture(this.artTex.baseTexture, rectA);\n    b.sprite.texture = new Texture(this.artTex.baseTexture, rectB);\n  }\n\n  private isSolved() {\n    return this.tiles.every(t => t.index === t.correct);\n  }\n\n  private generatePrincessTexture(W: number, H: number): Texture {\n    // Draw a simple vector \"princess\": face, hair, crown, heart, shoulders\n    const g = new Graphics();\n\n    // background soft gradient blocks\n    g.beginFill(0x3b2240, 1); g.drawRoundedRect(0, 0, W, H, 24); g.endFill();\n    // vignette corners\n    g.beginFill(0x1a0b1e, 0.55);\n    g.drawCircle(-W*0.15, -H*0.10, Math.max(W,H)*0.6);\n    g.drawCircle(W*1.15, -H*0.10, Math.max(W,H)*0.6);\n    g.drawCircle(-W*0.10, H*1.10, Math.max(W,H)*0.6);\n    g.drawCircle(W*1.10, H*1.10, Math.max(W,H)*0.6);\n    g.endFill();\n\n    // shoulders / dress\n    g.beginFill(0xf472b6, 1);\n    g.drawEllipse(W*0.5, H*0.82, W*0.36, H*0.22);\n    g.endFill();\n\n    // hair\n    g.beginFill(0x8d5524, 1);\n    g.drawEllipse(W*0.5, H*0.44, W*0.34, H*0.30);\n    g.drawEllipse(W*0.30, H*0.55, W*0.16, H*0.18);\n    g.drawEllipse(W*0.70, H*0.55, W*0.16, H*0.18);\n    g.endFill();\n\n    // face\n    g.beginFill(0xffe0bd, 1);\n    g.drawEllipse(W*0.5, H*0.46, W*0.20, H*0.18);\n    g.endFill();\n\n    // eyes\n    g.beginFill(0x111111, 1);\n    g.drawCircle(W*0.44, H*0.46, Math.min(W,H)*0.012);\n    g.drawCircle(W*0.56, H*0.46, Math.min(W,H)*0.012);\n    g.endFill();\n\n    // mouth (heart)\n    g.beginFill(0xff6b6b, 1);\n    const cx = W*0.5, cy = H*0.54, r = Math.min(W,H)*0.03;\n    g.moveTo(cx, cy + r*0.6);\n    g.quadraticCurveTo(cx - r, cy - r*0.2, cx, cy - r*0.2);\n    g.quadraticCurveTo(cx + r, cy - r*0.2, cx, cy + r*0.6);\n    g.endFill();\n\n    // crown\n    g.beginFill(0xfcd34d, 1);\n    const crownY = H*0.29, cw = W*0.28, ch = H*0.12;\n    g.drawPolygon([\n      W*0.5 - cw/2, crownY + ch,\n      W*0.5 - cw*0.22, crownY + ch*0.35,\n      W*0.5, crownY,\n      W*0.5 + cw*0.22, crownY + ch*0.35,\n      W*0.5 + cw/2, crownY + ch,\n    ]);\n    g.endFill();\n    // crown jewels\n    g.beginFill(0x93c5fd, 1); g.drawCircle(W*0.5, crownY + ch*0.55, H*0.018); g.endFill();\n    g.beginFill(0xfca5a5, 1); g.drawCircle(W*0.5 - cw*0.18, crownY + ch*0.75, H*0.014); g.endFill();\n    g.beginFill(0xfca5a5, 1); g.drawCircle(W*0.5 + cw*0.18, crownY + ch*0.75, H*0.014); g.endFill();\n\n    // stars\n    g.beginFill(0xfff1a6, 0.9);\n    for (let i=0;i<6;i++) {\n      const sx = W*(0.15 + Math.random()*0.7);\n      const sy = H*(0.12 + Math.random()*0.2);\n      const s = Math.min(W,H)*0.01*(0.8 + Math.random()*0.6);\n      for (let k=0;k<5;k++) {\n        const a = (k / 5) * Math.PI*2 - Math.PI/2;\n        const rx = sx + Math.cos(a) * s * (k%2?0.6:1.1);\n        const ry = sy + Math.sin(a) * s * (k%2?0.6:1.1);\n        if (k===0) g.moveTo(rx, ry); else g.lineTo(rx, ry);\n      }\n      g.closePath();\n    }\n    g.endFill();\n\n    const tex = this.app.renderer.generateTexture(g);\n    return tex;\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    // basic scoring: fewer moves → better\n    const timeBonus = Math.round(this.remainMs / 6);\n    const movePenalty = this.moves * 20;\n    const base = success ? 800 : 0;\n    const score = Math.max(0, base + timeBonus - movePenalty);\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","secondsToMs","fallbackMs","clamp","x","lo","hi","shuffle","arr","i","j","PuzzlePrincessGame","GameTemplate","app","__publicField","Container","s","diff","W","H","showPreview","bg","Graphics","title","Text","Sprite","Texture","Rectangle","scale","frame","lines","y","order","_","idx","correct","current","col","row","x0","y0","frameRect","subTexture","spr","e","tile","_e","deltaTime","dtMs","result","_a","a","b","ai","bi","rectA","rectB","t","g","cx","cy","r","crownY","cw","ch","sx","sy","k","rx","ry","success","timeBonus","movePenalty","score"],"mappings":"0PAyBA,SAASA,EAAaC,EAA6B,CAAE,OAAOA,IAAM,QAAUA,IAAM,UAAYA,IAAM,MAAQ,CAC5G,SAASC,EAAcC,EAAoC,CACzD,MAAMC,EAAKD,EAAiB,WACrB,OAAAH,EAAaI,CAAC,EAAIA,EAAI,QAC/B,CACA,SAASC,EAAY,EAAuBC,EAAoB,CAC9D,OAAI,OAAO,GAAM,UAAY,SAAS,CAAC,EAAU,KAAK,IAAI,IAAM,KAAK,MAAM,EAAI,GAAI,CAAC,EAC7EA,CACT,CACA,SAASC,EAAMC,EAAWC,EAAYC,EAAY,CAAE,OAAO,KAAK,IAAID,EAAI,KAAK,IAAIC,EAAIF,CAAC,CAAC,CAAG,CAC1F,SAASG,EAAWC,EAAU,CAAE,QAASC,EAAID,EAAI,OAAS,EAAGC,EAAI,EAAGA,IAAK,CAAE,MAAMC,EAAK,KAAK,OAAO,GAAKD,EAAI,GAAM,EAAG,CAACD,EAAIC,CAAC,EAAGD,EAAIE,CAAC,CAAC,EAAI,CAACF,EAAIE,CAAC,EAAGF,EAAIC,CAAC,CAAC,CAAG,CAAS,OAAAD,CAAK,CAUhK,MAAMG,UAA2BC,CAAa,CAuCnD,YAAYC,EAAkBd,EAAkC,CAC9D,MAAMc,EAAKd,CAAQ,EAvCde,EAAA,kBAECA,EAAA,aAAQ,IAAIC,GACZD,EAAA,gBAAW,IACXA,EAAA,gBAAW,KAGXA,EAAA,YAAO,GACPA,EAAA,aAAQ,KACRA,EAAA,aAAQ,KACRA,EAAA,aAAQ,KACRA,EAAA,aAAQ,KACRA,EAAA,aAAgB,CAAA,GAChBA,EAAA,cAAS,GACTA,EAAA,cAAS,GAGTA,EAAA,YAAoB,MACpBA,EAAA,eAGAA,EAAA,eACAA,EAAA,YAAO,KACPA,EAAA,YAAO,KACPA,EAAA,gBAGAA,EAAA,aAAQ,GACRA,EAAA,aAAQ,GAGRA,EAAA,cAAS,CACf,MAAO,QAAU,SAAU,QAC3B,MAAO,SAAU,MAAO,SACxB,OAAQ,SACR,KAAM,QAAA,EAKR,CAEA,MAAM,aAA6B,CACjC,MAAME,EAAK,KAAa,SAClBC,EAAOnB,EAAckB,CAAC,EACtBE,EAAI,KAAK,IAAI,SAAS,MAAOC,EAAI,KAAK,IAAI,SAAS,OAGzD,KAAK,SAAWlB,EAAae,EAAU,SAAoB,GAAM,EAG7DC,IAAS,OAAQ,KAAK,KAAO,EACxBA,IAAS,OAAQ,KAAK,KAAO,EACjC,KAAK,KAAO,EACb,OAAOD,EAAE,MAAS,UAAY,SAASA,EAAE,IAAI,IAAQ,KAAA,KAAOb,EAAM,KAAK,MAAMa,EAAE,IAAI,EAAG,EAAG,CAAC,GACxF,MAAAI,EAAeJ,EAAE,aAAe,GAElCA,EAAE,UAAY,SAChB,KAAK,OAAO,MAAQ,QAAU,KAAK,OAAO,SAAW,QAAU,KAAK,OAAO,MAAQ,UAC1EA,EAAE,UAAY,WACvB,KAAK,OAAO,MAAQ,QAAU,KAAK,OAAO,SAAW,OAAU,KAAK,OAAO,MAAQ,SAI/E,MAAAK,EAAK,IAAIC,EACZD,EAAA,UAAU,KAAK,OAAO,KAAK,EAAMA,EAAA,SAAS,EAAG,EAAGH,EAAG,KAAK,MAAMC,EAAI,GAAI,CAAC,EAAGE,EAAG,QAAQ,EACrFA,EAAA,UAAU,KAAK,OAAO,QAAQ,EAAMA,EAAA,SAAS,EAAG,KAAK,MAAMF,EAAI,GAAI,EAAGD,EAAGC,CAAC,EAAGE,EAAG,QAAQ,EACtF,KAAA,MAAM,SAASA,CAAE,EAGtB,KAAK,MAAQ,KAAK,IAAI,KAAK,MAAMH,EAAI,GAAI,EAAG,KAAK,MAAMC,EAAI,GAAI,CAAC,EAChE,KAAK,MAAQ,KAAK,MAClB,KAAK,MAAQ,KAAK,MAAM,KAAK,MAAQ,KAAK,IAAI,EAC9C,KAAK,MAAQ,KAAK,MAAM,KAAK,MAAQ,KAAK,IAAI,EAC9C,KAAK,OAAS,KAAK,OAAOD,EAAI,KAAK,OAAS,CAAC,EAC7C,KAAK,OAAS,KAAK,MAAMC,EAAI,EAAI,EAG3B,MAAAI,EAAQ,IAAIC,EAAK,kBAAmB,CACxC,WAAY,QAAS,SAAU,KAAK,MAAM,KAAK,IAAIN,EAAGC,CAAC,EAAI,GAAI,EAC/D,KAAM,KAAK,OAAO,KAAM,OAAQ,EAAU,gBAAiB,CAAA,CAC5D,EAUD,GATMI,EAAA,OAAO,IAAI,EAAG,EACpBA,EAAM,EAAIL,EAAI,EAAGK,EAAM,EAAI,KAAK,MAAMJ,EAAI,GAAI,EACzC,KAAA,MAAM,SAASI,CAAK,EAGzB,KAAK,KAAO,KAAK,MAAO,KAAK,KAAO,KAAK,MACzC,KAAK,OAAS,KAAK,wBAAwB,KAAK,KAAM,KAAK,IAAI,EAG3DH,EAAa,CACf,KAAK,QAAU,IAAIK,EAAO,IAAIC,EAAQ,KAAK,OAAO,YAAa,IAAIC,EAAU,EAAE,EAAE,KAAK,KAAK,KAAK,IAAI,CAAC,CAAC,EACtG,MAAMC,EAAQ,KAAK,IAAI,IAAM,KAAK,IAAKV,EAAE,IAAM,KAAK,KAAOC,EAAE,IAAM,KAAK,IAAI,CAAC,EACxE,KAAA,QAAQ,MAAM,IAAIS,CAAK,EACvB,KAAA,QAAQ,EAAI,KAAK,MAAMV,EAAE,EAAK,KAAK,QAAQ,MAAM,CAAE,EACnD,KAAA,QAAQ,EAAI,KAAK,MAAM,KAAK,OAAS,KAAK,QAAQ,OAAS,EAAE,EAC7D,KAAA,MAAM,SAAS,KAAK,OAAO,CAClC,CAGM,MAAAW,EAAQ,IAAIP,EAClBO,EAAM,UAAU,EAAG,KAAK,OAAO,MAAO,GAAI,EAC1CA,EAAM,gBAAgB,KAAK,OAAS,EAAG,KAAK,OAAS,EAAG,KAAK,MAAQ,GAAI,KAAK,MAAQ,GAAI,EAAE,EAC5FA,EAAM,QAAQ,EACT,KAAA,MAAM,SAASA,CAAK,EAGnB,MAAAC,EAAQ,IAAIR,EAClBQ,EAAM,UAAU,EAAG,KAAK,OAAO,MAAO,GAAI,EAC1C,QAASrB,EAAI,EAAGA,EAAI,KAAK,KAAMA,IAAK,CAClC,MAAML,EAAI,KAAK,OAASK,EAAI,KAAK,MAC3BsB,EAAI,KAAK,OAAStB,EAAI,KAAK,MAC3BqB,EAAA,OAAO1B,EAAG,KAAK,MAAM,EAAG0B,EAAM,OAAO1B,EAAG,KAAK,OAAS,KAAK,KAAK,EAChE0B,EAAA,OAAO,KAAK,OAAQC,CAAC,EAAGD,EAAM,OAAO,KAAK,OAAS,KAAK,MAAOC,CAAC,CACxE,CACK,KAAA,MAAM,SAASD,CAAK,EAGzB,MAAME,EAAQzB,EAAQ,MAAM,KAAK,CAAE,OAAQ,KAAK,KAAO,KAAK,MAAQ,CAAC0B,EAAGxB,IAAMA,CAAC,CAAC,EAEjEuB,EAAM,MAAM,CAACnC,EAAGY,IAAMZ,IAAMY,CAAC,GAC5BuB,EAAM,OAAS,IAAG,CAACA,EAAM,CAAC,EAAGA,EAAM,CAAC,CAAC,EAAI,CAACA,EAAM,CAAC,EAAGA,EAAM,CAAC,CAAC,GAE5E,QAASE,EAAM,EAAGA,EAAMF,EAAM,OAAQE,IAAO,CAC3C,MAAMC,EAAUD,EACVE,EAAUJ,EAAME,CAAG,EACnBG,EAAMH,EAAM,KAAK,KAAMI,EAAM,KAAK,MAAMJ,EAAM,KAAK,IAAI,EACvDK,EAAK,KAAK,OAASF,EAAM,KAAK,MAAQ,KAAK,MAAQ,EACnDG,EAAK,KAAK,OAASF,EAAM,KAAK,MAAQ,KAAK,MAAQ,EAEnDG,EAAY,IAAId,EACnBS,EAAU,KAAK,KAAQ,KAAK,MAC7B,KAAK,MAAMA,EAAU,KAAK,IAAI,EAAI,KAAK,MACvC,KAAK,MAAO,KAAK,KAAA,EAEbM,EAAa,IAAIhB,EAAQ,KAAK,OAAO,YAAae,CAAS,EAC3DE,EAAM,IAAIlB,EAAOiB,CAAU,EAC7BC,EAAA,OAAO,IAAI,EAAG,EAClBA,EAAI,EAAIJ,EAAII,EAAI,EAAIH,EACpBG,EAAI,UAAY,SACZA,EAAA,GAAG,aAAeC,GAA6B,CAAEA,EAAE,gBAAgB,EAAG,KAAK,UAAUC,CAAI,CAAA,CAAI,EAE3F,MAAAA,EAAa,CAAE,OAAQF,EAAK,MAAOP,EAAS,QAAAD,EAAS,GAAAI,EAAI,GAAAC,GAC9DG,EAAY,SAAWE,EACnB,KAAA,MAAM,KAAKA,CAAI,EACf,KAAA,MAAM,SAASF,CAAG,CACzB,CAGK,KAAA,OAAS,IAAIrB,EAClB,KAAK,OAAO,QAAU,GACjB,KAAA,MAAM,SAAS,KAAK,MAAM,EAE1B,KAAA,UAAU,SAAS,KAAK,KAAK,CACpC,CAEA,YAAYwB,EAAiC,CAE7C,CAEA,WAAWC,EAAyB,CAClC,GAAI,KAAK,SAAU,OACb,MAAAC,EAAOD,GAAa,IAAO,IAE7B,GADJ,KAAK,UAAYC,EACb,KAAK,UAAY,EAAG,CACtB,KAAK,SAAW,EAChB,KAAK,OAAO,EAAK,EACjB,MACF,CACF,CAEU,WAAWC,EAAmD,QACtEC,EAAA,KAAK,YAAL,MAAAA,EAAA,UAAiBD,EAAO,QAASA,EAAO,MAC1C,CAGQ,UAAUJ,EAAY,CAC5B,GAAI,MAAK,SACL,IAAA,CAAC,KAAK,KAAM,CACd,KAAK,KAAOA,EACZ,KAAK,cAAcA,CAAI,EACvB,MACF,CACI,GAAA,KAAK,OAASA,EAAM,CAEtB,KAAK,KAAO,KACZ,KAAK,OAAO,QAAU,GACtB,MACF,CAEK,KAAA,UAAU,KAAK,KAAMA,CAAI,EACzB,KAAA,QACL,KAAK,KAAO,KACZ,KAAK,OAAO,QAAU,GAElB,KAAK,YACP,KAAK,OAAO,EAAI,EAEpB,CAEQ,cAAcA,EAAY,CAChC,KAAK,OAAO,QACZ,KAAK,OAAO,UAAU,EAAG,KAAK,OAAO,OAAQ,GAAI,EACjD,KAAK,OAAO,gBACVA,EAAK,OAAO,EAAI,KAAK,MAAM,EAAI,EAC/BA,EAAK,OAAO,EAAI,KAAK,MAAM,EAAI,EAC/B,KAAK,MAAQ,EAAG,KAAK,MAAQ,EAAG,EAAA,EAElC,KAAK,OAAO,UACZ,KAAK,OAAO,QAAU,EACxB,CAEQ,UAAUM,EAASC,EAAS,CAElC,MAAMC,EAAKF,EAAE,MAAOG,EAAKF,EAAE,MAC3B,GAAIC,IAAOC,EAAI,OAEfH,EAAE,MAAQG,EAAIF,EAAE,MAAQC,EAExB,MAAME,EAAQ,IAAI5B,EACfwB,EAAE,MAAQ,KAAK,KAAQ,KAAK,MAC7B,KAAK,MAAMA,EAAE,MAAQ,KAAK,IAAI,EAAI,KAAK,MACvC,KAAK,MAAO,KAAK,KAAA,EAEbK,EAAQ,IAAI7B,EACfyB,EAAE,MAAQ,KAAK,KAAQ,KAAK,MAC7B,KAAK,MAAMA,EAAE,MAAQ,KAAK,IAAI,EAAI,KAAK,MACvC,KAAK,MAAO,KAAK,KAAA,EAEnBD,EAAE,OAAO,QAAU,IAAIzB,EAAQ,KAAK,OAAO,YAAa6B,CAAK,EAC7DH,EAAE,OAAO,QAAU,IAAI1B,EAAQ,KAAK,OAAO,YAAa8B,CAAK,CAC/D,CAEQ,UAAW,CACjB,OAAO,KAAK,MAAM,SAAWC,EAAE,QAAUA,EAAE,OAAO,CACpD,CAEQ,wBAAwBvC,EAAWC,EAAoB,CAEvD,MAAAuC,EAAI,IAAIpC,EAGZoC,EAAA,UAAU,QAAU,CAAC,EAAGA,EAAE,gBAAgB,EAAG,EAAGxC,EAAGC,EAAG,EAAE,EAAGuC,EAAE,QAAQ,EAErEA,EAAA,UAAU,QAAU,GAAI,EAC1BA,EAAE,WAAW,CAACxC,EAAE,IAAM,CAACC,EAAE,GAAM,KAAK,IAAID,EAAEC,CAAC,EAAE,EAAG,EAC9CuC,EAAA,WAAWxC,EAAE,KAAM,CAACC,EAAE,GAAM,KAAK,IAAID,EAAEC,CAAC,EAAE,EAAG,EAC7CuC,EAAA,WAAW,CAACxC,EAAE,GAAMC,EAAE,IAAM,KAAK,IAAID,EAAEC,CAAC,EAAE,EAAG,EAC7CuC,EAAA,WAAWxC,EAAE,IAAMC,EAAE,IAAM,KAAK,IAAID,EAAEC,CAAC,EAAE,EAAG,EAC9CuC,EAAE,QAAQ,EAGRA,EAAA,UAAU,SAAU,CAAC,EACrBA,EAAA,YAAYxC,EAAE,GAAKC,EAAE,IAAMD,EAAE,IAAMC,EAAE,GAAI,EAC3CuC,EAAE,QAAQ,EAGRA,EAAA,UAAU,QAAU,CAAC,EACrBA,EAAA,YAAYxC,EAAE,GAAKC,EAAE,IAAMD,EAAE,IAAMC,EAAE,EAAI,EACzCuC,EAAA,YAAYxC,EAAE,GAAMC,EAAE,IAAMD,EAAE,IAAMC,EAAE,GAAI,EAC1CuC,EAAA,YAAYxC,EAAE,GAAMC,EAAE,IAAMD,EAAE,IAAMC,EAAE,GAAI,EAC5CuC,EAAE,QAAQ,EAGRA,EAAA,UAAU,SAAU,CAAC,EACrBA,EAAA,YAAYxC,EAAE,GAAKC,EAAE,IAAMD,EAAE,GAAMC,EAAE,GAAI,EAC3CuC,EAAE,QAAQ,EAGRA,EAAA,UAAU,QAAU,CAAC,EACrBA,EAAA,WAAWxC,EAAE,IAAMC,EAAE,IAAM,KAAK,IAAID,EAAEC,CAAC,EAAE,IAAK,EAC9CuC,EAAA,WAAWxC,EAAE,IAAMC,EAAE,IAAM,KAAK,IAAID,EAAEC,CAAC,EAAE,IAAK,EAChDuC,EAAE,QAAQ,EAGRA,EAAA,UAAU,SAAU,CAAC,EACjB,MAAAC,EAAKzC,EAAE,GAAK0C,EAAKzC,EAAE,IAAM0C,EAAI,KAAK,IAAI3C,EAAEC,CAAC,EAAE,IACjDuC,EAAE,OAAOC,EAAIC,EAAKC,EAAE,EAAG,EACrBH,EAAA,iBAAiBC,EAAKE,EAAGD,EAAKC,EAAE,GAAKF,EAAIC,EAAKC,EAAE,EAAG,EACnDH,EAAA,iBAAiBC,EAAKE,EAAGD,EAAKC,EAAE,GAAKF,EAAIC,EAAKC,EAAE,EAAG,EACrDH,EAAE,QAAQ,EAGRA,EAAA,UAAU,SAAU,CAAC,EACvB,MAAMI,EAAS3C,EAAE,IAAM4C,EAAK7C,EAAE,IAAM8C,EAAK7C,EAAE,IAC3CuC,EAAE,YAAY,CACZxC,EAAE,GAAM6C,EAAG,EAAGD,EAASE,EACvB9C,EAAE,GAAM6C,EAAG,IAAMD,EAASE,EAAG,IAC7B9C,EAAE,GAAK4C,EACP5C,EAAE,GAAM6C,EAAG,IAAMD,EAASE,EAAG,IAC7B9C,EAAE,GAAM6C,EAAG,EAAGD,EAASE,CAAA,CACxB,EACDN,EAAE,QAAQ,EAERA,EAAA,UAAU,QAAU,CAAC,EAAGA,EAAE,WAAWxC,EAAE,GAAK4C,EAASE,EAAG,IAAM7C,EAAE,IAAK,EAAGuC,EAAE,QAAQ,EAClFA,EAAA,UAAU,SAAU,CAAC,EAAKA,EAAA,WAAWxC,EAAE,GAAM6C,EAAG,IAAMD,EAASE,EAAG,IAAM7C,EAAE,IAAK,EAAGuC,EAAE,QAAQ,EAC5FA,EAAA,UAAU,SAAU,CAAC,EAAKA,EAAA,WAAWxC,EAAE,GAAM6C,EAAG,IAAMD,EAASE,EAAG,IAAM7C,EAAE,IAAK,EAAGuC,EAAE,QAAQ,EAG5FA,EAAA,UAAU,SAAU,EAAG,EACzB,QAASjD,EAAE,EAAEA,EAAE,EAAEA,IAAK,CACpB,MAAMwD,EAAK/C,GAAG,IAAO,KAAK,SAAS,IAC7BgD,EAAK/C,GAAG,IAAO,KAAK,SAAS,IAC7BH,EAAI,KAAK,IAAIE,EAAEC,CAAC,EAAE,KAAM,GAAM,KAAK,OAAS,EAAA,IAClD,QAASgD,EAAE,EAAEA,EAAE,EAAEA,IAAK,CACpB,MAAMhB,EAAKgB,EAAI,EAAK,KAAK,GAAG,EAAI,KAAK,GAAG,EAClCC,EAAKH,EAAK,KAAK,IAAId,CAAC,EAAInC,GAAKmD,EAAE,EAAE,GAAI,KACrCE,EAAKH,EAAK,KAAK,IAAIf,CAAC,EAAInC,GAAKmD,EAAE,EAAE,GAAI,KACvCA,IAAI,EAAKT,EAAA,OAAOU,EAAIC,CAAE,EAAUX,EAAA,OAAOU,EAAIC,CAAE,CACnD,CACAX,EAAE,UAAU,CACd,CACA,OAAAA,EAAE,QAAQ,EAEE,KAAK,IAAI,SAAS,gBAAgBA,CAAC,CAEjD,CAEQ,OAAOY,EAAkB,OAC/B,GAAI,KAAK,SAAU,OACnB,KAAK,SAAW,GAEhB,MAAMC,EAAY,KAAK,MAAM,KAAK,SAAW,CAAC,EACxCC,EAAc,KAAK,MAAQ,GAE3BC,EAAQ,KAAK,IAAI,GADVH,EAAU,IAAM,GACIC,EAAYC,CAAW,GACnDtB,EAAA,KAAA,YAAA,MAAAA,EAAA,UAAYoB,EAASG,EAC5B,CACF"}