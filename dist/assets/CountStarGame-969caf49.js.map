{"version":3,"file":"CountStarGame-969caf49.js","sources":["../../src/game-engine/CountStarGame.ts"],"sourcesContent":["// CountStarGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'count_star' in your factory/registry.\n//\n// Gameplay:\n// - A bunch of stars appear briefly. Remember how many!\n// - Stars hide, and multiple numeric options appear. Tap the correct count.\n// - Clear a target number of rounds before time runs out.\n//\n// Project compatibility notes:\n// - Do NOT narrow base types; import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty/timerText.\n// - Use an internal `finished` flag (no reliance on a specific GameState union).\n// - Emit results via `onGameEnd(success, score)`.\nimport { Application, Container, Graphics, Text, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface CountStarSettings extends GameSettings {\n  rounds?: number;          // questions to clear (default: easy=6 / normal=8 / hard=10)\n  options?: number;         // number of answer options (3..6)\n  showTimeMs?: number;      // how long stars are visible per round\n  answerTimeMs?: number;    // time to answer after stars hide\n  minStars?: number;        // optional min star count\n  maxStars?: number;        // optional max star count\n  missesAllowed?: number;   // max misses before fail\n  palette?: 'night' | 'sunset' | 'forest';\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty { return v === 'easy' || v === 'normal' || v === 'hard'; }\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\nfunction shuffle<T>(arr: T[]) { for (let i = arr.length - 1; i > 0; i--) { const j = (Math.random() * (i + 1)) | 0; [arr[i], arr[j]] = [arr[j], arr[i]]; } return arr; }\nfunction uniqPush(arr: number[], v: number) { if (!arr.includes(v)) arr.push(v); }\n\ntype Tile = { root: Container; bg: Graphics; label: Text; index: number; value: number };\ntype Phase = 'show' | 'answer';\n\nexport class CountStarGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private finished = false;\n  private remainMs = 30_000;\n\n  // UI\n  private titleText!: Text;\n  private infoText!: Text;\n  private timeBar!: Graphics;\n  private tiles: Tile[] = [];\n  private starsLayer = new Container();\n\n  // layout\n  private cols = 2;\n  private rows = 2;\n  private tileW = 160;\n  private tileH = 110;\n  private gapX = 18;\n  private gapY = 14;\n\n  // runtime\n  private phase: Phase = 'show';\n  private phaseRemain = 0; // ms remaining in current phase\n\n  private roundsNeeded = 8;\n  private roundsDone = 0;\n  private optionsCount = 4;\n  private missesAllowed = 3;\n  private misses = 0;\n\n  private showTimeMs = 1100;\n  private answerTimeMs = 2600;\n\n  private minStars = 5;\n  private maxStars = 14;\n  private currentCount = 0;\n  private correctIndex = 0;\n\n  // scoring\n  private score = 0;\n  private combo = 0;\n\n  // colors\n  private colors = {\n    bgTop: 0x0b1020, bgBottom: 0x151a2b,\n    star: 0xfff1a6, starAlt: 0xffffff,\n    tile: 0xffffff, tileText: 0x1b1b1b,\n    good: 0x92e6a7, bad: 0xff5a5a,\n    barBack: 0x374151, barFill: 0x3b82f6,\n    text: 0xffffff,\n  };\n\n  constructor(app: Application, settings: CountStarSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as CountStarSettings;\n    const diff = getDifficulty(s);\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // duration\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n\n    // difficulty presets\n    if (diff === 'easy')       { this.roundsNeeded = 6; this.optionsCount = 3; this.missesAllowed = 4; this.showTimeMs = 1400; this.answerTimeMs = 3000; this.minStars = 3; this.maxStars = 10; }\n    else if (diff === 'hard')  { this.roundsNeeded = 10; this.optionsCount = 5; this.missesAllowed = 2; this.showTimeMs = 900;  this.answerTimeMs = 2200; this.minStars = 8; this.maxStars = 18; }\n    else                       { this.roundsNeeded = 8; this.optionsCount = 4; this.missesAllowed = 3; this.showTimeMs = 1100; this.answerTimeMs = 2600; this.minStars = 5; this.maxStars = 14; }\n\n    // overrides\n    if (typeof s.rounds === 'number' && isFinite(s.rounds)) this.roundsNeeded = clamp(Math.round(s.rounds), 3, 30);\n    if (typeof s.options === 'number' && isFinite(s.options)) this.optionsCount = clamp(Math.round(s.options), 3, 6);\n    if (typeof s.missesAllowed === 'number' && isFinite(s.missesAllowed)) this.missesAllowed = clamp(Math.round(s.missesAllowed), 0, 10);\n    if (typeof s.showTimeMs === 'number' && isFinite(s.showTimeMs)) this.showTimeMs = clamp(Math.round(s.showTimeMs), 400, 5000);\n    if (typeof s.answerTimeMs === 'number' && isFinite(s.answerTimeMs)) this.answerTimeMs = clamp(Math.round(s.answerTimeMs), 1000, 8000);\n    if (typeof s.minStars === 'number' && isFinite(s.minStars)) this.minStars = clamp(Math.round(s.minStars), 1, 40);\n    if (typeof s.maxStars === 'number' && isFinite(s.maxStars)) this.maxStars = clamp(Math.round(s.maxStars), Math.max(2, this.minStars + 1), 60);\n\n    if (s.palette === 'forest') {\n      this.colors.bgTop = 0x0b2e20; this.colors.bgBottom = 0x03150f; this.colors.barFill = 0x34d399;\n    } else if (s.palette === 'sunset') {\n      this.colors.bgTop = 0x301934; this.colors.bgBottom = 0x1a0b1e; this.colors.barFill = 0xff6b6b;\n    } else if (s.palette === 'night') {\n      this.colors.bgTop = 0x0b1020; this.colors.bgBottom = 0x151a2b; this.colors.barFill = 0x3b82f6;\n    }\n\n    // background\n    const bg = new Graphics();\n    bg.beginFill(this.colors.bgTop); bg.drawRect(0, 0, W, Math.floor(H * 0.45)); bg.endFill();\n    bg.beginFill(this.colors.bgBottom); bg.drawRect(0, Math.floor(H * 0.45), W, H); bg.endFill();\n    this.scene.addChild(bg);\n\n    // title\n    this.titleText = new Text('Count the Stars!', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.06),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 5,\n    });\n    this.titleText.anchor.set(0.5);\n    this.titleText.x = W / 2; this.titleText.y = Math.floor(H * 0.20);\n    this.scene.addChild(this.titleText);\n\n    // info\n    this.infoText = new Text('', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.045),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 4,\n    });\n    this.infoText.anchor.set(0.5);\n    this.infoText.x = W / 2; this.infoText.y = Math.floor(H * 0.28);\n    this.scene.addChild(this.infoText);\n    this.updateInfo();\n\n    // time bar\n    this.timeBar = new Graphics();\n    this.scene.addChild(this.timeBar);\n\n    // stars layer\n    this.starsLayer.y = Math.floor(H * 0.36);\n    this.scene.addChild(this.starsLayer);\n\n    // answer grid layout (prepared once)\n    this.cols = Math.ceil(Math.sqrt(this.optionsCount));\n    this.rows = Math.ceil(this.optionsCount / this.cols);\n    const usableW = W - 80;\n    const usableH = H - Math.floor(H * 0.50) - 40;\n    this.tileW = Math.min(200, Math.floor(usableW / this.cols) - 16);\n    this.tileH = Math.min(120, Math.floor(usableH / this.rows) - 16);\n    this.gapX = Math.max(12, Math.floor((usableW - this.cols * this.tileW) / (this.cols + 1)));\n    this.gapY = Math.max(10, Math.floor((usableH - this.rows * this.tileH) / (this.rows + 1)));\n\n    const startY = Math.floor(H * 0.56);\n    const startX = (W - (this.cols * this.tileW + (this.cols - 1) * this.gapX)) / 2 + this.tileW / 2;\n\n    for (let i = 0; i < this.optionsCount; i++) {\n      const root = new Container();\n      const bgTile = new Graphics();\n      bgTile.beginFill(this.colors.tile, 0.96);\n      bgTile.drawRoundedRect(-this.tileW/2, -this.tileH/2, this.tileW, this.tileH, 16);\n      bgTile.endFill();\n      const label = new Text('', { fontFamily: 'sans-serif', fontSize: Math.floor(this.tileH * 0.44), fill: this.colors.tileText });\n      label.anchor.set(0.5);\n      root.addChild(bgTile, label);\n      root.eventMode = 'static';\n      const idx = i;\n      root.on('pointertap', (e: FederatedPointerEvent) => { e.stopPropagation(); this.onTap(idx); });\n\n      const c = i % this.cols; const r = Math.floor(i / this.cols);\n      root.x = startX + c * (this.tileW + this.gapX);\n      root.y = startY + r * (this.tileH + this.gapY);\n\n      root.visible = false; // hidden during SHOW phase\n\n      this.scene.addChild(root);\n      this.tiles.push({ root, bg: bgTile, label, index: idx, value: 0 });\n    }\n\n    this.container.addChild(this.scene);\n\n    // start first round\n    this.nextRound(true);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n\n    // overall timer\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(this.roundsDone >= this.roundsNeeded);\n      return;\n    }\n\n    // phase timer\n    this.phaseRemain -= dtMs;\n    if (this.phaseRemain <= 0) {\n      if (this.phase === 'show') {\n        this.switchToAnswer();\n      } else {\n        // answer timeout -> miss\n        this.registerMiss('timeout');\n      }\n    }\n\n    this.drawPhaseBar();\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private updateInfo() {\n    const remainS = Math.ceil(this.remainMs / 1000);\n    this.infoText.text = `Round ${this.roundsDone}/${this.roundsNeeded}   Miss ${this.misses}/${this.missesAllowed}   Time ${remainS}s`;\n  }\n\n  private drawPhaseBar() {\n    const W = this.app.renderer.width;\n    const y = Math.floor(this.app.renderer.height * 0.33);\n    const w = Math.floor(W * 0.7);\n    const x = Math.floor((W - w) / 2);\n    const h = 10;\n    const total = (this.phase === 'show') ? this.showTimeMs : this.answerTimeMs;\n    const frac = clamp(this.phaseRemain / total, 0, 1);\n    this.timeBar.clear();\n    this.timeBar.beginFill(this.colors.barBack, 0.4); this.timeBar.drawRoundedRect(x, y, w, h, 6); this.timeBar.endFill();\n    this.timeBar.beginFill(this.colors.barFill, 0.95); this.timeBar.drawRoundedRect(x, y, Math.floor(w * frac), h, 6); this.timeBar.endFill();\n  }\n\n  private nextRound(first = false) {\n    // choose count\n    const count = (this.minStars + Math.floor(Math.random() * (this.maxStars - this.minStars + 1)));\n    this.currentCount = count;\n\n    // draw stars\n    this.starsLayer.removeChildren();\n    this.drawStars(count);\n\n    // hide answers for show phase\n    for (const t of this.tiles) t.root.visible = false;\n\n    // set phase\n    this.phase = 'show';\n    this.phaseRemain = this.showTimeMs;\n    this.drawPhaseBar();\n    if (!first) this.updateInfo();\n  }\n\n  private switchToAnswer() {\n    // hide stars\n    this.starsLayer.visible = false;\n\n    // build answers\n    const opts: number[] = [this.currentCount];\n    while (opts.length < this.optionsCount) {\n      const jitter = ((Math.random() * 5) | 0) - 2; // -2..+2\n      let v = this.currentCount + (jitter === 0 ? 3 : jitter);\n      v = clamp(v, Math.max(1, this.minStars), this.maxStars + 4);\n      uniqPush(opts, v);\n    }\n    shuffle(opts);\n    this.correctIndex = opts.indexOf(this.currentCount);\n    for (let i = 0; i < this.tiles.length; i++) {\n      const t = this.tiles[i];\n      t.value = opts[i] ?? 0;\n      t.label.text = String(t.value);\n      // reset style and show\n      t.bg.clear();\n      t.bg.beginFill(this.colors.tile, 0.96);\n      t.bg.drawRoundedRect(-this.tileW/2, -this.tileH/2, this.tileW, this.tileH, 16);\n      t.bg.endFill();\n      t.root.visible = true;\n    }\n\n    this.phase = 'answer';\n    this.phaseRemain = this.answerTimeMs;\n    this.drawPhaseBar();\n  }\n\n  private onTap(idx: number) {\n    if (this.finished || this.phase !== 'answer') return;\n    const correct = (idx === this.correctIndex);\n    if (correct) {\n      this.roundsDone++;\n      this.combo++;\n      const speedFrac = clamp(this.phaseRemain / this.answerTimeMs, 0, 1);\n      const base = 300, comboBonus = Math.min(7, this.combo) * 60, speedBonus = Math.round(140 * speedFrac);\n      this.score += base + comboBonus + speedBonus;\n      this.flashTile(this.tiles[idx], this.colors.good);\n      if (this.roundsDone >= this.roundsNeeded) {\n        this.finish(true);\n      } else {\n        // reset for next round\n        this.starsLayer.visible = true;\n        setTimeout(() => this.nextRound(), 180);\n      }\n    } else {\n      this.registerMiss('wrong', idx);\n    }\n  }\n\n  private registerMiss(_reason: 'wrong' | 'timeout', idx: number | null = null) {\n    this.combo = 0;\n    this.misses++;\n    this.score = Math.max(0, this.score - 150);\n    if (idx != null) this.flashTile(this.tiles[idx], this.colors.bad);\n    // indicate correct tile briefly\n    const c = this.tiles[this.correctIndex];\n    this.flashTile(c, this.colors.good, 0.18);\n\n    if (this.misses > this.missesAllowed) {\n      this.finish(false);\n    } else {\n      this.starsLayer.visible = true;\n      setTimeout(() => this.nextRound(), 220);\n    }\n  }\n\n  private flashTile(tile: Tile, color: number, alpha = 0.28) {\n    const g = new Graphics();\n    g.beginFill(color, alpha);\n    g.drawRoundedRect(-this.tileW/2, -this.tileH/2, this.tileW, this.tileH, 16);\n    g.endFill();\n    g.x = tile.root.x; g.y = tile.root.y;\n    this.scene.addChild(g);\n    const steps = 8;\n    for (let i = 1; i <= steps; i++) {\n      setTimeout(() => { g.alpha = Math.max(0, alpha * (1 - i/steps)); if (i === steps) this.scene.removeChild(g); }, i * 30);\n    }\n  }\n\n  private drawStars(n: number) {\n    const W = this.app.renderer.width;\n    const H = this.app.renderer.height;\n    const areaW = Math.floor(W * 0.76);\n    const areaH = Math.floor(H * 0.16);\n    const x0 = Math.floor((W - areaW) / 2);\n    const y0 = Math.floor(H * 0.36);\n    const minR = 8, maxR = 16;\n    this.starsLayer.removeChildren();\n\n    for (let i = 0; i < n; i++) {\n      const r = Math.floor(minR + Math.random() * (maxR - minR));\n      const x = x0 + r + Math.random() * (areaW - r * 2);\n      const y = y0 + r + Math.random() * (areaH - r * 2);\n      const star = new Graphics();\n      const color = (i % 3 === 0) ? this.colors.star : this.colors.starAlt;\n      this.drawStar(star, x, y, r, color);\n      this.starsLayer.addChild(star);\n    }\n  }\n\n  private drawStar(g: Graphics, cx: number, cy: number, R: number, color: number) {\n    const spikes = 5;\n    const outer = R;\n    const inner = R * 0.5;\n    g.beginFill(color, 1);\n    for (let i = 0; i < spikes * 2; i++) {\n      const ang = (Math.PI / spikes) * i - Math.PI / 2;\n      const rad = (i % 2 === 0) ? outer : inner;\n      const x = cx + Math.cos(ang) * rad;\n      const y = cy + Math.sin(ang) * rad;\n      if (i === 0) g.moveTo(x, y); else g.lineTo(x, y);\n    }\n    g.closePath();\n    g.endFill();\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 8);\n    const roundBonus = this.roundsDone * 60;\n    const missPenalty = this.misses * 120;\n    const score = Math.max(0, this.score + timeBonus + roundBonus - missPenalty + (success ? 700 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","secondsToMs","s","fallbackMs","clamp","x","lo","hi","shuffle","arr","i","j","uniqPush","CountStarGame","GameTemplate","app","__publicField","Container","diff","W","H","bg","Graphics","Text","usableW","usableH","startY","startX","root","bgTile","label","idx","e","c","r","_e","deltaTime","dtMs","result","_a","remainS","y","w","h","total","frac","first","count","opts","jitter","speedFrac","base","comboBonus","speedBonus","_reason","tile","color","alpha","g","steps","n","areaW","areaH","x0","y0","minR","maxR","star","cx","cy","R","outer","inner","ang","rad","success","timeBonus","roundBonus","missPenalty","score"],"mappings":"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"}