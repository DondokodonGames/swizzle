{"version":3,"file":"OrderMasterGame-e507a786.js","sources":["../../src/game-engine/OrderMasterGame.ts"],"sourcesContent":["// OrderMasterGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'order_master' in your factory/registry.\n//\n// Gameplay:\n// - N number cards appear in random order.\n// - Drag & drop cards to reorder them into ascending order before time runs out.\n// - Clear multiple rounds depending on difficulty/rounds setting.\n//\n// Constraints for project compatibility:\n// - Do NOT narrow base types; import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty.\n// - Use an internal `finished` flag rather than relying on a specific GameState union.\n// - Emit results via `onGameEnd(success, score)`.\nimport { Application, Container, Graphics, Text, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface OrderMasterSettings extends GameSettings {\n  itemCount?: number;  // number of cards per round (defaults by difficulty)\n  rounds?: number;     // rounds to clear (defaults by difficulty)\n  palette?: 'cool' | 'warm' | 'forest';\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty { return v === 'easy' || v === 'normal' || v === 'hard'; }\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\nfunction shuffle<T>(arr: T[]) { for (let i = arr.length - 1; i > 0; i--) { const j = (Math.random() * (i + 1)) | 0; [arr[i], arr[j]] = [arr[j], arr[i]]; } return arr; }\n\ntype Card = {\n  root: Container;\n  bg: Graphics;\n  label: Text;\n  value: number;\n  slotIndex: number; // current slot index in layout\n  dragging?: boolean;\n  dragOffX?: number;\n  dragOffY?: number;\n};\n\nexport class OrderMasterGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private finished = false;\n  private remainMs = 30_000;\n\n  // layout\n  private cards: Card[] = [];\n  private slots: Graphics[] = [];\n  private slotX0 = 0;\n  private slotY = 0;\n  private slotW = 120;\n  private slotH = 160;\n  private gap = 18;\n\n  // runtime\n  private itemCount = 6;\n  private roundsNeeded = 2;\n  private roundsDone = 0;\n\n  // score\n  private score = 0;\n  private combo = 0;\n\n  // palette\n  private colors = {\n    bgTop: 0x0ea5e9, bgBottom: 0x022c44,\n    card: 0xffffff, cardEdge: 0x0ea5e9, text: 0x1b1b1b,\n    slot: 0xffffff,\n    good: 0x92e6a7, bad: 0xff5a5a,\n  };\n\n  constructor(app: Application, settings: OrderMasterSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as OrderMasterSettings;\n    const diff = getDifficulty(s);\n\n    // duration\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n\n    // difficulty presets\n    if (diff === 'easy') { this.itemCount = 5; this.roundsNeeded = 1; }\n    else if (diff === 'hard') { this.itemCount = 7; this.roundsNeeded = 3; }\n    else { this.itemCount = 6; this.roundsNeeded = 2; }\n\n    if (typeof s.itemCount === 'number' && isFinite(s.itemCount)) this.itemCount = clamp(Math.round(s.itemCount), 3, 10);\n    if (typeof s.rounds === 'number' && isFinite(s.rounds)) this.roundsNeeded = clamp(Math.round(s.rounds), 1, 6);\n\n    if (s.palette === 'warm') {\n      this.colors.bgTop = 0xffa94d; this.colors.bgBottom = 0x5a2a00; this.colors.cardEdge = 0xff8787;\n    } else if (s.palette === 'forest') {\n      this.colors.bgTop = 0x14532d; this.colors.bgBottom = 0x052e16; this.colors.cardEdge = 0x34d399;\n    }\n\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // background split tint\n    const bg = new Graphics();\n    bg.beginFill(this.colors.bgTop); bg.drawRect(0, 0, W, Math.floor(H*0.55)); bg.endFill();\n    bg.beginFill(this.colors.bgBottom); bg.drawRect(0, Math.floor(H*0.55), W, H); bg.endFill();\n    this.scene.addChild(bg);\n\n    // layout slots horizontally centered\n    this.slotW = Math.min(140, Math.floor((W - 80) / this.itemCount));\n    this.slotH = Math.min(180, Math.floor(H * 0.42));\n    this.gap = Math.min(22, Math.max(12, Math.floor((W - this.itemCount * this.slotW) / (this.itemCount + 1))));\n    this.slotY = Math.floor(H * 0.62);\n    this.slotX0 = this.gap + this.slotW/2;\n\n    for (let i = 0; i < this.itemCount; i++) {\n      const slot = new Graphics();\n      slot.lineStyle(3, 0xffffff, 0.65);\n      slot.beginFill(this.colors.slot, 0.06);\n      slot.drawRoundedRect(-this.slotW/2, -this.slotH/2, this.slotW, this.slotH, 18);\n      slot.endFill();\n      slot.x = this.slotX0 + i * (this.slotW + this.gap);\n      slot.y = this.slotY;\n      this.scene.addChild(slot);\n      this.slots.push(slot);\n    }\n\n    // cards\n    this.generateRound();\n\n    // pointer events\n    this.scene.eventMode = 'static';\n    this.scene.on('pointerdown', (e: FederatedPointerEvent) => this.onDown(e));\n    this.scene.on('pointermove', (e: FederatedPointerEvent) => this.onMove(e));\n    this.scene.on('pointerup',   (e: FederatedPointerEvent) => this.onUp(e));\n    this.scene.on('pointerupoutside', (e: FederatedPointerEvent) => this.onUp(e));\n\n    this.container.addChild(this.scene);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(false);\n      return;\n    }\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private generateRound() {\n    // clear existing cards if any\n    for (const c of this.cards) this.scene.removeChild(c.root);\n    this.cards = [];\n\n    // produce numbers 1..itemCount randomized\n    const values = shuffle(Array.from({ length: this.itemCount }, (_, i) => i + 1));\n    for (let i = 0; i < this.itemCount; i++) {\n      const root = new Container();\n      const bg = new Graphics();\n      bg.beginFill(this.colors.card, 1);\n      bg.lineStyle(6, this.colors.cardEdge, 0.95);\n      bg.drawRoundedRect(-this.slotW/2, -this.slotH/2, this.slotW, this.slotH, 18);\n      bg.endFill();\n      const label = new Text(String(values[i]), { fontFamily: 'sans-serif', fontSize: Math.floor(this.slotH * 0.48), fill: 0x1b1b1b });\n      label.anchor.set(0.5);\n      root.addChild(bg, label);\n\n      root.x = this.slots[i].x;\n      root.y = this.slots[i].y;\n      root.eventMode = 'static';\n      (root as any).__card__ = true;\n\n      this.scene.addChild(root);\n      this.cards.push({ root, bg, label, value: values[i], slotIndex: i });\n    }\n  }\n\n  private onDown(e: FederatedPointerEvent) {\n    if (this.finished) return;\n    const localPt = this.scene.toLocal(e.global);\n    // find topmost card under pointer\n    for (let i = this.cards.length - 1; i >= 0; i--) {\n      const c = this.cards[i];\n      const b = c.root.getBounds();\n      if (localPt.x >= b.x && localPt.x <= b.x + b.width && localPt.y >= b.y && localPt.y <= b.y + b.height) {\n        c.dragging = true;\n        c.dragOffX = localPt.x - c.root.x;\n        c.dragOffY = localPt.y - c.root.y;\n        // bring to front\n        this.scene.removeChild(c.root); this.scene.addChild(c.root);\n        return;\n      }\n    }\n  }\n\n  private onMove(e: FederatedPointerEvent) {\n    if (this.finished) return;\n    const localPt = this.scene.toLocal(e.global);\n    for (const c of this.cards) {\n      if (!c.dragging) continue;\n      c.root.x = localPt.x - (c.dragOffX ?? 0);\n      c.root.y = localPt.y - (c.dragOffY ?? 0);\n    }\n  }\n\n  private onUp(e: FederatedPointerEvent) {\n    if (this.finished) return;\n    const dragging = this.cards.find(c => c.dragging);\n    if (!dragging) return;\n\n    dragging.dragging = false;\n\n    // snap to nearest slot by x\n    const idx = this.nearestSlotIndex(dragging.root.x);\n    this.placeCardAtIndex(dragging, idx);\n\n    // check success\n    if (this.isSorted()) {\n      this.roundsDone++;\n      this.combo++;\n      const roundScore = 800 + this.combo * 120 + Math.round(this.remainMs / 12);\n      this.score += roundScore;\n      // short flash on slots\n      this.flashSlots(0x92e6a7);\n      if (this.roundsDone >= this.roundsNeeded) {\n        this.finish(true);\n      } else {\n        // next round\n        setTimeout(() => this.generateRound(), 220);\n      }\n    }\n  }\n\n  private nearestSlotIndex(x: number) {\n    // choose closest by distance\n    let best = 0, bestDist = Number.POSITIVE_INFINITY;\n    for (let i = 0; i < this.slots.length; i++) {\n      const d = Math.abs(this.slots[i].x - x);\n      if (d < bestDist) { best = i; bestDist = d; }\n    }\n    return best;\n  }\n\n  private placeCardAtIndex(card: Card, targetIdx: number) {\n    targetIdx = clamp(targetIdx, 0, this.cards.length - 1);\n    // compute current order by slotIndex\n    // remove card from its old position and insert into new\n    const order = this.cards.slice().sort((a, b) => a.slotIndex - b.slotIndex);\n    const curPos = order.indexOf(card);\n    if (curPos < 0) return;\n\n    order.splice(curPos, 1);\n    order.splice(targetIdx, 0, card);\n\n    // reassign slotIndex according to new order and move\n    for (let i = 0; i < order.length; i++) {\n      const c = order[i];\n      c.slotIndex = i;\n      // snap move\n      c.root.x = this.slots[i].x;\n      c.root.y = this.slots[i].y;\n    }\n\n    // also update this.cards array order to maintain draw order coherence\n    this.cards = order;\n  }\n\n  private isSorted() {\n    // sorted ascending by card.value according to slotIndex\n    for (let i = 0; i < this.cards.length; i++) {\n      // the card with value (i+1) should be at slot i\n      const expected = i + 1;\n      const cardAtSlotI = this.cards.find(c => c.slotIndex === i);\n      if (!cardAtSlotI || cardAtSlotI.value !== expected) return false;\n    }\n    return true;\n  }\n\n  private flashSlots(color: number) {\n    for (const s of this.slots) {\n      const g = new Graphics();\n      g.beginFill(color, 0.28);\n      g.drawRoundedRect(-this.slotW/2, -this.slotH/2, this.slotW, this.slotH, 18);\n      g.endFill();\n      g.x = s.x; g.y = s.y;\n      this.scene.addChild(g);\n      // fade out\n      const steps = 8;\n      for (let i = 1; i <= steps; i++) {\n        setTimeout(() => { g.alpha = Math.max(0, 0.28 * (1 - i/steps)); if (i === steps) this.scene.removeChild(g); }, i * 30);\n      }\n    }\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 10);\n    const roundsBonus = this.roundsDone * 150;\n    const score = Math.max(0, this.score + timeBonus + roundsBonus + (success ? 800 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","secondsToMs","s","fallbackMs","clamp","x","lo","hi","shuffle","arr","i","j","OrderMasterGame","GameTemplate","app","__publicField","Container","diff","W","H","bg","Graphics","slot","e","_e","deltaTime","dtMs","result","_a","c","values","_","root","label","Text","localPt","b","dragging","idx","roundScore","best","bestDist","card","targetIdx","order","a","curPos","expected","cardAtSlotI","color","g","steps","success","timeBonus","roundsBonus","score"],"mappings":"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"}