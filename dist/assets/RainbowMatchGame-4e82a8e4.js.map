{"version":3,"file":"RainbowMatchGame-4e82a8e4.js","sources":["../../src/game-engine/RainbowMatchGame.ts"],"sourcesContent":["// RainbowMatchGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'rainbow_match' in your factory/registry.\n//\n// Gameplay:\n// - A rule tells you what to match: MEANING (word) or INK (font color).\n// - A target (e.g., \"BLUE\") is shown. Several tiles show color names with colored fills.\n// - Tap the tile that satisfies the current rule. Reach target hits before time runs out.\n//\n// Project compatibility:\n// - Do NOT narrow base types: import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty/timerText.\n// - Use an internal `finished` flag (avoid assuming a specific GameState union).\n// - Emit results via `onGameEnd(success, score)`.\nimport { Application, Container, Graphics, Text, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface RainbowMatchSettings extends GameSettings {\n  options?: number;          // number of option tiles per round (default by difficulty)\n  targetHits?: number;       // hits required to clear (default by difficulty)\n  mode?: 'meaning' | 'ink' | 'mixed'; // selection rule policy (default 'mixed')\n  palette?: 'classic' | 'warm' | 'cool'; // optional color set\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty { return v === 'easy' || v === 'normal' || v === 'hard'; }\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\nfunction shuffle<T>(arr: T[]) { for (let i = arr.length - 1; i > 0; i--) { const j = (Math.random() * (i + 1)) | 0; [arr[i], arr[j]] = [arr[j], arr[i]]; } return arr; }\n\ntype ColorDef = { name: string; hex: number; };\n\nconst PALETTES: Record<string, ColorDef[]> = {\n  classic: [\n    { name: 'RED',    hex: 0xef4444 },\n    { name: 'BLUE',   hex: 0x3b82f6 },\n    { name: 'GREEN',  hex: 0x22c55e },\n    { name: 'YELLOW', hex: 0xf59e0b },\n    { name: 'PURPLE', hex: 0xa855f7 },\n    { name: 'PINK',   hex: 0xec4899 },\n  ],\n  warm: [\n    { name: 'ORANGE', hex: 0xf97316 },\n    { name: 'RED',    hex: 0xef4444 },\n    { name: 'PINK',   hex: 0xec4899 },\n    { name: 'YELLOW', hex: 0xf59e0b },\n    { name: 'BROWN',  hex: 0x8b5a2b },\n    { name: 'PURPLE', hex: 0xa855f7 },\n  ],\n  cool: [\n    { name: 'BLUE',    hex: 0x3b82f6 },\n    { name: 'CYAN',    hex: 0x06b6d4 },\n    { name: 'GREEN',   hex: 0x22c55e },\n    { name: 'TEAL',    hex: 0x14b8a6 },\n    { name: 'INDIGO',  hex: 0x6366f1 },\n    { name: 'PURPLE',  hex: 0xa855f7 },\n  ],\n};\n\ntype Tile = {\n  root: Container;\n  bg: Graphics;\n  label: Text;\n  fillHex: number;\n  name: string;\n  index: number;\n};\n\nexport class RainbowMatchGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private finished = false;\n  private remainMs = 30_000;\n\n  // UI\n  private ruleText!: Text;\n  private cueText!: Text;\n  private tiles: Tile[] = [];\n\n  // layout\n  private cols = 2;\n  private rows = 2;\n  private tileW = 180;\n  private tileH = 140;\n  private gapX = 20;\n  private gapY = 16;\n\n  // runtime\n  private palette: ColorDef[] = PALETTES.classic;\n  private mode: 'meaning' | 'ink' | 'mixed' = 'mixed';\n  private options = 4;\n  private targetHits = 10;\n  private hits = 0;\n  private misses = 0;\n  private missesAllowed = 3;\n  private correctIndex = 0;\n  private currentRule: 'meaning' | 'ink' = 'meaning';\n  private targetColor!: ColorDef;\n\n  // scoring\n  private score = 0;\n  private combo = 0;\n\n  constructor(app: Application, settings: RainbowMatchSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as RainbowMatchSettings;\n    const diff = getDifficulty(s);\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // duration\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n\n    // difficulty presets\n    if (diff === 'easy') { this.options = 3; this.targetHits = 8; this.missesAllowed = 4; }\n    else if (diff === 'hard') { this.options = 5; this.targetHits = 12; this.missesAllowed = 2; }\n    else { this.options = 4; this.targetHits = 10; this.missesAllowed = 3; }\n\n    // user overrides\n    if (typeof s.options === 'number' && isFinite(s.options)) this.options = clamp(Math.round(s.options), 3, 6);\n    if (typeof s.targetHits === 'number' && isFinite(s.targetHits)) this.targetHits = clamp(Math.round(s.targetHits), 4, 30);\n    this.mode = s.mode ?? 'mixed';\n    this.palette = PALETTES[s.palette ?? 'classic'] ?? PALETTES.classic;\n\n    // layout grid\n    this.cols = Math.ceil(Math.sqrt(this.options));\n    this.rows = Math.ceil(this.options / this.cols);\n    const usableW = W - 80;\n    const usableH = H - 220;\n    this.tileW = Math.min(220, Math.floor(usableW / this.cols) - 16);\n    this.tileH = Math.min(160, Math.floor(usableH / this.rows) - 16);\n    this.gapX = Math.max(12, Math.floor((usableW - this.cols * this.tileW) / (this.cols + 1)));\n    this.gapY = Math.max(10, Math.floor((usableH - this.rows * this.tileH) / (this.rows + 1)));\n\n    // background\n    const bg = new Graphics();\n    bg.beginFill(0x0b1020); bg.drawRect(0,0,W,H); bg.endFill();\n    this.scene.addChild(bg);\n\n    // rule + cue\n    this.ruleText = new Text('Rule: MEANING', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W,H) * 0.05),\n      fill: 0xffffff, stroke: 0x000000, strokeThickness: 4,\n    });\n    this.ruleText.anchor.set(0.5, 0.5);\n    this.ruleText.x = W/2; this.ruleText.y = 40 + this.ruleText.height/2;\n    this.scene.addChild(this.ruleText);\n\n    this.cueText = new Text('BLUE', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W,H) * 0.1),\n      fill: 0xffffff, stroke: 0x000000, strokeThickness: 6,\n    });\n    this.cueText.anchor.set(0.5, 0.5);\n    this.cueText.x = W/2; this.cueText.y = Math.floor(H * 0.28);\n    this.scene.addChild(this.cueText);\n\n    // build tiles\n    for (let i=0;i<this.options;i++) {\n      const root = new Container();\n      const bgTile = new Graphics();\n      const label = new Text('COLOR', { fontFamily: 'sans-serif', fontSize: Math.floor(this.tileH*0.38), fill: 0x111111 });\n      label.anchor.set(0.5);\n      bgTile.beginFill(0xffffff, 0.95);\n      bgTile.drawRoundedRect(-this.tileW/2, -this.tileH/2, this.tileW, this.tileH, 16);\n      bgTile.endFill();\n      root.addChild(bgTile, label);\n      root.eventMode = 'static';\n      const idx = i;\n      root.on('pointertap', (e: FederatedPointerEvent) => { e.stopPropagation(); this.onTap(idx); });\n      this.scene.addChild(root);\n      this.tiles.push({ root, bg: bgTile, label, fillHex: 0xffffff, name: 'COLOR', index: idx });\n    }\n\n    this.positionTiles(W, H);\n\n    this.container.addChild(this.scene);\n\n    // start first round\n    this.nextRound(true);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(this.hits >= this.targetHits);\n      return;\n    }\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private positionTiles(W: number, H: number) {\n    const startX = (W - (this.cols * this.tileW + (this.cols - 1) * this.gapX)) / 2 + this.tileW/2;\n    const startY = Math.floor(H * 0.46);\n    for (let i = 0; i < this.tiles.length; i++) {\n      const c = i % this.cols;\n      const r = Math.floor(i / this.cols);\n      const x = startX + c * (this.tileW + this.gapX);\n      const y = startY + r * (this.tileH + this.gapY);\n      const t = this.tiles[i];\n      t.root.x = x; t.root.y = y;\n    }\n  }\n\n  private nextRound(first = false) {\n    // choose rule\n    this.currentRule = (this.mode === 'mixed') ? (Math.random() < 0.5 ? 'meaning' : 'ink') : this.mode;\n    this.ruleText.text = 'Rule: ' + (this.currentRule === 'meaning' ? 'MEANING (word)' : 'INK (color)');\n    // choose target color name\n    const palette = this.palette.slice();\n    shuffle(palette);\n    this.targetColor = palette[0];\n    // cue text with possibly incongruent ink color to mislead\n    const incongruent = palette[1];\n    this.cueText.text = this.targetColor.name;\n    this.cueText.style = {\n      fontFamily: 'sans-serif',\n      fontSize: this.cueText.style['fontSize'] || Math.floor(Math.min(this.app.renderer.width, this.app.renderer.height) * 0.1),\n      fill: (this.currentRule === 'ink') ? incongruent.hex : 0xffffff,\n      stroke: 0x000000, strokeThickness: 6,\n    };\n\n    // Build options so that exactly one is correct per rule\n    const options: { name: string; hex: number }[] = [];\n    // Ensure correct one present\n    if (this.currentRule === 'meaning') {\n      options.push({ name: this.targetColor.name, hex: palette[1]?.hex ?? this.targetColor.hex }); // word matches, ink may differ\n    } else {\n      options.push({ name: palette[1]?.name ?? this.targetColor.name, hex: this.targetColor.hex }); // ink matches, word may differ\n    }\n    // Fill rest with mismatches\n    let idx = 2;\n    while (options.length < this.options) {\n      const p = palette[idx % palette.length];\n      const alt = { name: p.name, hex: palette[(idx+1) % palette.length].hex };\n      // prevent accidental correct duplicates\n      if (this.currentRule === 'meaning') {\n        if (alt.name === this.targetColor.name) { idx++; continue; }\n      } else {\n        if (alt.hex === this.targetColor.hex) { idx++; continue; }\n      }\n      options.push(alt);\n      idx++;\n    }\n    shuffle(options);\n\n    // assign to tiles and find correctIndex\n    this.correctIndex = 0;\n    for (let i = 0; i < this.tiles.length; i++) {\n      const t = this.tiles[i];\n      const o = options[i];\n      t.fillHex = o.hex; t.name = o.name;\n      t.bg.clear();\n      t.bg.beginFill(o.hex, 0.95);\n      t.bg.drawRoundedRect(-this.tileW/2, -this.tileH/2, this.tileW, this.tileH, 16);\n      t.bg.endFill();\n      t.label.text = o.name;\n      t.label.style = { fontFamily: 'sans-serif', fontSize: Math.floor(this.tileH*0.34), fill: 0x111111, stroke: 0xffffff, strokeThickness: 2 };\n      // determine correctness\n      const isCorrect = (this.currentRule === 'meaning') ? (o.name === this.targetColor.name) : (o.hex === this.targetColor.hex);\n      if (isCorrect) this.correctIndex = i;\n    }\n  }\n\n  private onTap(idx: number) {\n    if (this.finished) return;\n    const correct = (idx === this.correctIndex);\n    if (correct) {\n      this.hits++;\n      this.combo++;\n      const fastBonus = 60; // lightweight constant; can expand to time-based if desired\n      const base = 300;\n      this.score += base + Math.min(8, this.combo) * 50 + fastBonus;\n      // visual flash on correct tile\n      this.flashTile(this.tiles[idx], 0x92e6a7);\n      if (this.hits >= this.targetHits) {\n        this.finish(true);\n        return;\n      }\n      setTimeout(() => this.nextRound(), 120);\n    } else {\n      this.combo = 0;\n      this.misses++;\n      this.score = Math.max(0, this.score - 120);\n      this.flashTile(this.tiles[idx], 0xff5a5a);\n      if (this.misses > this.missesAllowed) {\n        this.finish(false);\n        return;\n      }\n    }\n  }\n\n  private flashTile(tile: Tile, color: number) {\n    const g = new Graphics();\n    g.beginFill(color, 0.28);\n    g.drawRoundedRect(-this.tileW/2, -this.tileH/2, this.tileW, this.tileH, 16);\n    g.endFill();\n    g.x = tile.root.x; g.y = tile.root.y;\n    this.scene.addChild(g);\n    const steps = 8;\n    for (let i = 1; i <= steps; i++) {\n      setTimeout(() => { g.alpha = Math.max(0, 0.28 * (1 - i/steps)); if (i === steps) this.scene.removeChild(g); }, i * 30);\n    }\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 8);\n    const hitBonus = this.hits * 80;\n    const missPenalty = this.misses * 100;\n    const score = Math.max(0, this.score + timeBonus + hitBonus - missPenalty + (success ? 700 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","secondsToMs","s","fallbackMs","clamp","x","lo","hi","shuffle","arr","i","j","PALETTES","RainbowMatchGame","GameTemplate","app","__publicField","Container","diff","W","H","usableW","usableH","bg","Graphics","Text","root","bgTile","label","idx","e","_e","deltaTime","dtMs","result","_a","startX","startY","c","r","y","t","first","palette","incongruent","options","_b","alt","o","fastBonus","base","tile","color","g","steps","success","timeBonus","hitBonus","missPenalty","score"],"mappings":"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"}