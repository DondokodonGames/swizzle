{"version":3,"file":"BalanceGame-570799f1.js","sources":["../../src/game-engine/BalanceGame.ts"],"sourcesContent":["// BalanceGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'balance' in your factory/registry.\n//\n// Gameplay:\n// - A bar (see-saw) is centered on screen. A ball rests on it.\n// - Tap/hold LEFT or RIGHT half of the screen to tilt the bar and keep the ball from falling.\n// - Survive each round's timer. Clear enough rounds overall to win.\n//\n// Project compatibility notes:\n// - Do NOT narrow base types; import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty/timerText.\n// - Use an internal `finished` flag (avoid relying on a specific GameState union).\n// - Emit results via `onGameEnd(success, score)`.\nimport { Application, Container, Graphics, Text, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface BalanceSettings extends GameSettings {\n  rounds?: number;           // rounds to clear\n  roundTimeMs?: number;      // per-round time\n  missesAllowed?: number;    // allowed falls/timeouts overall\n  barLengthPx?: number;      // base bar length (auto scaled if omitted)\n  ballRadiusPx?: number;     // ball radius\n  tiltDegPerSec?: number;    // control sensitivity\n  maxAngleDeg?: number;      // clamp tilt\n  driftAmp?: number;         // px/s^2 along bar (external \"wind\"/slope drift)\n  friction?: number;         // velocity damping (0..1) per second\n  palette?: 'sunset' | 'forest' | 'night';\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty { return v === 'easy' || v === 'normal' || v === 'hard'; }\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\n\nexport class BalanceGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private finished = false;\n  private remainMs = 30_000;\n\n  // UI\n  private infoText!: Text;\n  private hintText!: Text;\n  private timeBar!: Graphics;\n\n  // geometry\n  private cx = 0; private cy = 0; // pivot center\n  private barLen = 420; private barH = 24;\n  private bar!: Graphics;\n  private ball!: Graphics;\n  private ballR = 18;\n\n  // state (bar angle & ball position along bar axis)\n  private theta = 0;               // radians\n  private maxAngle = Math.PI / 7;  // ~25.7deg\n  private tiltRate = (Math.PI / 180) * 85; // rad/s\n  private control = 0;             // -1, 0, +1\n\n  // ball motion along bar axis (u)\n  private u = 0;                   // px along bar (0 = center)\n  private v = 0;                   // velocity px/s along bar\n  private gravity = 800;           // px/s^2 equivalent pull along bar\n  private driftAmp = 140;          // px/s^2 external bias\n  private driftT = 0;              // time accumulator for drift oscillation\n  private friction = 0.12;         // per second damping coefficient\n\n  // rounds\n  private roundsNeeded = 8;\n  private roundsDone = 0;\n  private roundTimeMs = 2800;\n  private roundRemain = 2800;\n  private misses = 0;\n  private missesAllowed = 3;\n\n  // scoring\n  private score = 0;\n  private stabilityAccum = 0; // integrates small |u|\n\n  // colors\n  private colors = {\n    bgTop: 0x301934, bgBottom: 0x1a0b1e, // sunset default gradient\n    bar: 0xffffff, ball: 0xffffff,\n    good: 0x92e6a7, bad: 0xff5a5a,\n    text: 0xffffff, deco: 0x94a3b8,\n    barEdge: 0xf59e0b,\n    barFill: 0xffffff,\n    barShadow: 0x000000,\n    barBack: 0x374151, barFillUI: 0xff6b6b,\n  };\n\n  constructor(app: Application, settings: BalanceSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as BalanceSettings;\n    const diff = getDifficulty(s);\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // overall duration\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n\n    // difficulty presets\n    if (diff === 'easy') {\n      this.roundsNeeded = 6; this.roundTimeMs = 3000; this.missesAllowed = 4;\n      this.barLen = Math.min(520, Math.floor(W * 0.74)); this.ballR = 20;\n      this.tiltRate = (Math.PI / 180) * 90; this.maxAngle = (Math.PI / 180) * 22;\n      this.driftAmp = 110; this.friction = 0.16;\n    } else if (diff === 'hard') {\n      this.roundsNeeded = 10; this.roundTimeMs = 2400; this.missesAllowed = 2;\n      this.barLen = Math.min(460, Math.floor(W * 0.68)); this.ballR = 18;\n      this.tiltRate = (Math.PI / 180) * 80; this.maxAngle = (Math.PI / 180) * 28;\n      this.driftAmp = 170; this.friction = 0.08;\n    } else {\n      this.roundsNeeded = 8; this.roundTimeMs = 2800; this.missesAllowed = 3;\n      this.barLen = Math.min(500, Math.floor(W * 0.72)); this.ballR = 19;\n      this.tiltRate = (Math.PI / 180) * 85; this.maxAngle = (Math.PI / 180) * 25;\n      this.driftAmp = 140; this.friction = 0.12;\n    }\n\n    // overrides\n    if (typeof s.rounds === 'number' && isFinite(s.rounds)) this.roundsNeeded = clamp(Math.round(s.rounds), 3, 30);\n    if (typeof s.roundTimeMs === 'number' && isFinite(s.roundTimeMs)) this.roundTimeMs = clamp(Math.round(s.roundTimeMs), 1200, 6000);\n    if (typeof s.missesAllowed === 'number' && isFinite(s.missesAllowed)) this.missesAllowed = clamp(Math.round(s.missesAllowed), 0, 10);\n    if (typeof s.barLengthPx === 'number' && isFinite(s.barLengthPx)) this.barLen = clamp(Math.round(s.barLengthPx), 200, Math.floor(W * 0.9));\n    if (typeof s.ballRadiusPx === 'number' && isFinite(s.ballRadiusPx)) this.ballR = clamp(Math.round(s.ballRadiusPx), 8, 40);\n    if (typeof s.tiltDegPerSec === 'number' && isFinite(s.tiltDegPerSec)) this.tiltRate = (Math.PI / 180) * clamp(Math.round(s.tiltDegPerSec), 30, 180);\n    if (typeof s.maxAngleDeg === 'number' && isFinite(s.maxAngleDeg)) this.maxAngle = (Math.PI / 180) * clamp(Math.round(s.maxAngleDeg), 10, 40);\n    if (typeof s.driftAmp === 'number' && isFinite(s.driftAmp)) this.driftAmp = clamp(Math.round(s.driftAmp), 40, 320);\n    if (typeof s.friction === 'number' && isFinite(s.friction)) this.friction = clamp(s.friction, 0.02, 0.4);\n\n    if (s.palette === 'forest') {\n      this.colors.bgTop = 0x14532d; this.colors.bgBottom = 0x052e16; this.colors.barFillUI = 0x34d399;\n    } else if (s.palette === 'night') {\n      this.colors.bgTop = 0x0b1020; this.colors.bgBottom = 0x151a2b; this.colors.barFillUI = 0x3b82f6;\n    } else {\n      this.colors.bgTop = 0x301934; this.colors.bgBottom = 0x1a0b1e; this.colors.barFillUI = 0xff6b6b;\n    }\n\n    // layout\n    this.cx = Math.floor(W * 0.5);\n    this.cy = Math.floor(H * 0.62);\n\n    // background\n    const bg = new Graphics();\n    bg.beginFill(this.colors.bgTop); bg.drawRect(0, 0, W, Math.floor(H * 0.45)); bg.endFill();\n    bg.beginFill(this.colors.bgBottom); bg.drawRect(0, Math.floor(H * 0.45), W, H); bg.endFill();\n    this.scene.addChild(bg);\n\n    // decorative lines\n    for (let i = 0; i < 5; i++) {\n      const d = new Graphics();\n      d.lineStyle(2, this.colors.deco, 0.25);\n      const x = (i + 1) * (W / 6);\n      d.moveTo(x, 0); d.lineTo(x, H);\n      this.scene.addChild(d);\n    }\n\n    // info\n    this.infoText = new Text('', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.045),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 4,\n    });\n    this.infoText.anchor.set(0.5);\n    this.infoText.x = W / 2; this.infoText.y = Math.floor(H * 0.20);\n    this.scene.addChild(this.infoText);\n    this.updateInfo();\n\n    // hint\n    this.hintText = new Text('Tap LEFT/RIGHT to tilt', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.04),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 4,\n    });\n    this.hintText.anchor.set(0.5);\n    this.hintText.x = W / 2; this.hintText.y = Math.floor(H * 0.28);\n    this.scene.addChild(this.hintText);\n\n    // time bar\n    this.timeBar = new Graphics();\n    this.scene.addChild(this.timeBar);\n\n    // bar graphic\n    this.bar = new Graphics();\n    this.drawBar();\n    this.scene.addChild(this.bar);\n\n    // ball graphic\n    this.ball = new Graphics();\n    this.u = 0; this.v = 0; this.theta = 0;\n    this.drawBall();\n    this.scene.addChild(this.ball);\n\n    // input\n    this.scene.eventMode = 'static';\n    this.scene.on('pointerdown', (e: FederatedPointerEvent) => {\n      const x = e.global.x;\n      this.control = (x < this.app.renderer.width / 2) ? -1 : 1;\n    });\n    this.scene.on('pointerup', () => { this.control = 0; });\n    this.scene.on('pointerupoutside', () => { this.control = 0; });\n\n    this.container.addChild(this.scene);\n\n    // start first round\n    this.nextRound(true);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n    const dt = dtMs / 1000;\n\n    // overall timer\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(this.roundsDone >= this.roundsNeeded);\n      return;\n    }\n\n    // per-round timer\n    this.roundRemain -= dtMs;\n    if (this.roundRemain <= 0) {\n      // survived the round\n      this.roundsDone++;\n      if (this.roundsDone >= this.roundsNeeded) {\n        this.finish(true);\n        return;\n      }\n      this.nextRound();\n    }\n\n    // control & tilt\n    if (this.control !== 0) {\n      this.theta += this.control * this.tiltRate * dt;\n      this.theta = clamp(this.theta, -this.maxAngle, this.maxAngle);\n      this.drawBar();\n    }\n\n    // physics on bar\n    // acceleration along bar axis: gravity*sin(theta) + oscillating drift\n    this.driftT += dt;\n    const drift = this.driftAmp * Math.sin(this.driftT * (1.6 + Math.random() * 0.2));\n    const a = this.gravity * Math.sin(this.theta) + drift;\n    this.v += a * dt;\n    // friction damping (exponential towards 0)\n    const damp = Math.exp(-this.friction * dt);\n    this.v *= damp;\n    this.u += this.v * dt;\n\n    // stability metric (reward small |u|)\n    this.stabilityAccum += Math.max(0, (1.0 - Math.min(1, Math.abs(this.u) / (this.barLen * 0.5))) ) * dt;\n\n    // fall check\n    const edge = this.barLen * 0.5 - this.ballR * 0.6;\n    if (Math.abs(this.u) > edge) {\n      this.registerMiss();\n      return;\n    }\n\n    // render\n    this.drawBall();\n    this.drawTimeBar();\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private updateInfo() {\n    const remainS = Math.ceil(this.remainMs / 1000);\n    this.infoText.text = `Round ${this.roundsDone}/${this.roundsNeeded}   Miss ${this.misses}/${this.missesAllowed}   Time ${remainS}s`;\n  }\n\n  private drawTimeBar() {\n    const W = this.app.renderer.width;\n    const y = Math.floor(this.app.renderer.height * 0.34);\n    const w = Math.floor(W * 0.7);\n    const x = Math.floor((W - w) / 2);\n    const h = 10;\n    const frac = clamp(this.roundRemain / this.roundTimeMs, 0, 1);\n    this.timeBar.clear();\n    this.timeBar.beginFill(this.colors.barBack, 0.4); this.timeBar.drawRoundedRect(x, y, w, h, 6); this.timeBar.endFill();\n    this.timeBar.beginFill(this.colors.barFillUI, 0.95); this.timeBar.drawRoundedRect(x, y, Math.floor(w * frac), h, 6); this.timeBar.endFill();\n  }\n\n  private nextRound(first = false) {\n    // reset state but keep difficulty ramp via slight drift increase and maxAngle loosen (tiny)\n    if (!first) {\n      this.driftAmp = clamp(this.driftAmp * 1.05, 40, 360);\n      this.maxAngle = clamp(this.maxAngle * 1.01, (Math.PI/180)*10, (Math.PI/180)*40);\n    }\n    this.u = 0; this.v = 0;\n    this.theta = (Math.random() - 0.5) * this.maxAngle * 0.6; // slight random tilt start\n    this.roundRemain = this.roundTimeMs;\n    this.drawBar();\n    this.drawBall();\n    if (!first) this.updateInfo();\n  }\n\n  private drawBar() {\n    const g = this.bar;\n    const W = this.app.renderer.width;\n    const H = this.app.renderer.height;\n    this.cx = Math.floor(W * 0.5);\n    this.cy = Math.floor(H * 0.62);\n\n    g.clear();\n    g.beginFill(this.colors.barShadow, 0.20);\n    g.drawRoundedRect(-this.barLen/2 + 6, -this.barH/2 + 10, this.barLen - 12, this.barH, this.barH/2);\n    g.endFill();\n\n    g.beginFill(this.colors.barFill, 0.96);\n    g.lineStyle(4, this.colors.barEdge, 0.9);\n    g.drawRoundedRect(-this.barLen/2, -this.barH/2, this.barLen, this.barH, this.barH/2);\n    g.endFill();\n\n    g.x = this.cx; g.y = this.cy;\n    g.rotation = this.theta;\n  }\n\n  private drawBall() {\n    const g = this.ball;\n    const nx = -Math.sin(this.theta), ny = Math.cos(this.theta); // normal\n    const tx = Math.cos(this.theta), ty = Math.sin(this.theta);  // tangent\n    const x = this.cx + this.u * tx + (this.barH/2 + this.ballR) * nx;\n    const y = this.cy + this.u * ty + (this.barH/2 + this.ballR) * ny;\n\n    g.clear();\n    g.beginFill(this.colors.ball, 0.96);\n    g.drawCircle(0, 0, this.ballR);\n    g.endFill();\n    // tiny shadow\n    g.beginFill(0x000000, 0.18);\n    g.drawEllipse(this.ballR*0.2, this.ballR*0.4, this.ballR*0.7, this.ballR*0.38);\n    g.endFill();\n    g.x = x; g.y = y;\n  }\n\n  private registerMiss() {\n    this.misses++;\n    if (this.misses > this.missesAllowed) {\n      this.finish(false);\n      return;\n    }\n    // quick reset to center & next round\n    this.nextRound();\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 6);\n    const stabilityBonus = Math.round(this.stabilityAccum * 200);\n    const missPenalty = this.misses * 120;\n    const score = Math.max(0, timeBonus + stabilityBonus - missPenalty + (success ? 800 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","secondsToMs","s","fallbackMs","clamp","x","lo","hi","BalanceGame","GameTemplate","app","__publicField","Container","diff","W","H","bg","Graphics","i","Text","e","_e","deltaTime","dtMs","dt","drift","damp","edge","result","_a","remainS","y","w","h","frac","first","g","nx","ny","tx","ty","success","timeBonus","stabilityBonus","missPenalty","score"],"mappings":"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"}