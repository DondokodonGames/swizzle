{"version":3,"file":"NumberHuntGame-c49b11bb.js","sources":["../../src/game-engine/NumberHuntGame.ts"],"sourcesContent":["// NumberHuntGame.ts\n// Drop-in short game template (PixiJS + TypeScript)\n// Register under key 'number_hunt' in your factory/registry.\n//\n// Gameplay:\n// - A grid of digits appears. A target number is announced (e.g., \"Find all 7!\").\n// - Tap all tiles matching the target before the per-round timer ends.\n// - Clear enough rounds before the overall timer ends.\n//\n// Project compatibility notes:\n// - Do NOT narrow base types; import GameTemplate & GameSettings only.\n// - Do NOT redeclare base fields like duration/difficulty/timerText.\n// - Use an internal `finished` flag (no reliance on a specific GameState union).\n// - Emit results via `onGameEnd(success, score)`.\nimport { Application, Container, Graphics, Text, FederatedPointerEvent } from 'pixi.js';\nimport { GameTemplate, type GameSettings } from './GameTemplate';\n\nexport type Difficulty = 'easy' | 'normal' | 'hard';\n\nexport interface NumberHuntSettings extends GameSettings {\n  rounds?: number;          // rounds to clear (default by difficulty)\n  gridCols?: number;        // 3..6\n  gridRows?: number;        // 3..6\n  digitsMax?: number;       // max digit (3..9) inclusive\n  targetsPerRound?: number; // number of target tiles per round (auto if undefined)\n  roundTimeMs?: number;     // time per round\n  missesAllowed?: number;   // overall wrong-tap/timeouts allowed before fail\n  palette?: 'night' | 'forest' | 'sunset';\n}\n\n// ---- helpers ----\nfunction isDifficulty(v: unknown): v is Difficulty { return v === 'easy' || v === 'normal' || v === 'hard'; }\nfunction getDifficulty(settings: GameSettings): Difficulty {\n  const d = (settings as any).difficulty;\n  return isDifficulty(d) ? d : 'normal';\n}\nfunction secondsToMs(s: number | undefined, fallbackMs: number) {\n  if (typeof s === 'number' && isFinite(s)) return Math.max(1000, Math.round(s * 1000));\n  return fallbackMs;\n}\nfunction clamp(x: number, lo: number, hi: number) { return Math.max(lo, Math.min(hi, x)); }\nfunction shuffle<T>(arr: T[]) { for (let i = arr.length - 1; i > 0; i--) { const j = (Math.random() * (i + 1)) | 0; [arr[i], arr[j]] = [arr[j], arr[i]]; } return arr; }\n\ntype Tile = { root: Container; bg: Graphics; label: Text; value: number; found: boolean; index: number };\n\nexport class NumberHuntGame extends GameTemplate {\n  public onGameEnd?: (success: boolean, score: number) => void;\n\n  private scene = new Container();\n  private finished = false;\n  private remainMs = 30_000;\n\n  // UI\n  private titleText!: Text;\n  private infoText!: Text;\n  private promptText!: Text;\n  private timeBar!: Graphics;\n  private tiles: Tile[] = [];\n\n  // layout\n  private cols = 4;\n  private rows = 4;\n  private tileW = 120;\n  private tileH = 120;\n  private gapX = 16;\n  private gapY = 16;\n\n  // runtime\n  private roundsNeeded = 8;\n  private roundsDone = 0;\n  private missesAllowed = 3;\n  private misses = 0;\n  private digitsMax = 9;\n  private targetsPerRound: number | null = null;\n\n  private currentTarget = 0;\n  private remainingTargets = 0;\n  private roundTimeMs = 3000;\n  private roundRemain = 3000;\n  private awaiting = false;\n\n  // scoring\n  private score = 0;\n  private combo = 0;\n\n  // colors\n  private colors = {\n    bgTop: 0x0b1020, bgBottom: 0x151a2b,\n    tile: 0xffffff, tileText: 0x1b1b1b,\n    good: 0x92e6a7, bad: 0xff5a5a,\n    barBack: 0x374151, barFill: 0x3b82f6,\n    text: 0xffffff,\n  };\n\n  constructor(app: Application, settings: NumberHuntSettings) {\n    super(app, settings);\n  }\n\n  async createScene(): Promise<void> {\n    const s = (this as any).settings as NumberHuntSettings;\n    const diff = getDifficulty(s);\n    const W = this.app.renderer.width, H = this.app.renderer.height;\n\n    // duration\n    this.remainMs = secondsToMs((s as any).duration as number, 30_000);\n\n    // difficulty presets\n    if (diff === 'easy')       { this.roundsNeeded = 6; this.cols = 3; this.rows = 3; this.digitsMax = 6; this.missesAllowed = 4; this.roundTimeMs = 3600; }\n    else if (diff === 'hard')  { this.roundsNeeded = 10; this.cols = 5; this.rows = 5; this.digitsMax = 9; this.missesAllowed = 2; this.roundTimeMs = 2800; }\n    else                       { this.roundsNeeded = 8; this.cols = 4; this.rows = 4; this.digitsMax = 8; this.missesAllowed = 3; this.roundTimeMs = 3200; }\n\n    // overrides\n    if (typeof s.rounds === 'number' && isFinite(s.rounds)) this.roundsNeeded = clamp(Math.round(s.rounds), 3, 30);\n    if (typeof s.gridCols === 'number' && isFinite(s.gridCols)) this.cols = clamp(Math.round(s.gridCols), 3, 6);\n    if (typeof s.gridRows === 'number' && isFinite(s.gridRows)) this.rows = clamp(Math.round(s.gridRows), 3, 6);\n    if (typeof s.digitsMax === 'number' && isFinite(s.digitsMax)) this.digitsMax = clamp(Math.round(s.digitsMax), 3, 9);\n    if (typeof s.targetsPerRound === 'number' && isFinite(s.targetsPerRound)) this.targetsPerRound = clamp(Math.round(s.targetsPerRound), 1, Math.max(1, Math.floor((this.cols * this.rows) * 0.5)));\n    if (typeof s.roundTimeMs === 'number' && isFinite(s.roundTimeMs)) this.roundTimeMs = clamp(Math.round(s.roundTimeMs), 1200, 6000);\n    if (typeof s.missesAllowed === 'number' && isFinite(s.missesAllowed)) this.missesAllowed = clamp(Math.round(s.missesAllowed), 0, 10);\n\n    if (s.palette === 'forest') {\n      this.colors.bgTop = 0x0b2e20; this.colors.bgBottom = 0x03150f; this.colors.barFill = 0x34d399;\n    } else if (s.palette === 'sunset') {\n      this.colors.bgTop = 0x301934; this.colors.bgBottom = 0x1a0b1e; this.colors.barFill = 0xff6b6b;\n    }\n\n    // background\n    const bg = new Graphics();\n    bg.beginFill(this.colors.bgTop); bg.drawRect(0, 0, W, Math.floor(H * 0.45)); bg.endFill();\n    bg.beginFill(this.colors.bgBottom); bg.drawRect(0, Math.floor(H * 0.45), W, H); bg.endFill();\n    this.scene.addChild(bg);\n\n    // title\n    this.titleText = new Text('Number Hunt', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.06),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 5,\n    });\n    this.titleText.anchor.set(0.5);\n    this.titleText.x = W / 2; this.titleText.y = Math.floor(H * 0.20);\n    this.scene.addChild(this.titleText);\n\n    // info\n    this.infoText = new Text('', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.045),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 4,\n    });\n    this.infoText.anchor.set(0.5);\n    this.infoText.x = W / 2; this.infoText.y = Math.floor(H * 0.27);\n    this.scene.addChild(this.infoText);\n    this.updateInfo();\n\n    // prompt\n    this.promptText = new Text('Ready?', {\n      fontFamily: 'sans-serif', fontSize: Math.floor(Math.min(W, H) * 0.09),\n      fill: this.colors.text, stroke: 0x000000, strokeThickness: 6,\n    });\n    this.promptText.anchor.set(0.5);\n    this.promptText.x = W / 2; this.promptText.y = Math.floor(H * 0.36);\n    this.scene.addChild(this.promptText);\n\n    // time bar\n    this.timeBar = new Graphics();\n    this.scene.addChild(this.timeBar);\n\n    // grid layout\n    const usableW = W - 80;\n    const usableH = H - Math.floor(H * 0.50) - 40;\n    this.tileW = Math.min(200, Math.floor(usableW / this.cols) - 16);\n    this.tileH = Math.min(160, Math.floor(usableH / this.rows) - 16);\n    this.gapX = Math.max(12, Math.floor((usableW - this.cols * this.tileW) / (this.cols + 1)));\n    this.gapY = Math.max(10, Math.floor((usableH - this.rows * this.tileH) / (this.rows + 1)));\n\n    const startY = Math.floor(H * 0.52);\n    const startX = (W - (this.cols * this.tileW + (this.cols - 1) * this.gapX)) / 2 + this.tileW / 2;\n\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.cols; c++) {\n        const idx = r * this.cols + c;\n        const root = new Container();\n        const bgTile = new Graphics();\n        bgTile.beginFill(this.colors.tile, 0.96);\n        bgTile.drawRoundedRect(-this.tileW/2, -this.tileH/2, this.tileW, this.tileH, 16);\n        bgTile.endFill();\n        const label = new Text('', { fontFamily: 'sans-serif', fontSize: Math.floor(this.tileH * 0.50), fill: this.colors.tileText });\n        label.anchor.set(0.5);\n        root.addChild(bgTile, label);\n        root.eventMode = 'static';\n        root.on('pointertap', (e: FederatedPointerEvent) => { e.stopPropagation(); this.onTap(idx); });\n\n        root.x = startX + c * (this.tileW + this.gapX);\n        root.y = startY + r * (this.tileH + this.gapY);\n\n        this.scene.addChild(root);\n        this.tiles.push({ root, bg: bgTile, label, value: 0, found: false, index: idx });\n      }\n    }\n\n    this.container.addChild(this.scene);\n\n    // start first round\n    this.nextRound(true);\n  }\n\n  handleInput(_e: FederatedPointerEvent): void {\n    // not used\n  }\n\n  updateGame(deltaTime: number): void {\n    if (this.finished) return;\n    const dtMs = deltaTime * (1000 / 60);\n\n    // overall timer\n    this.remainMs -= dtMs;\n    if (this.remainMs <= 0) {\n      this.remainMs = 0;\n      this.finish(this.roundsDone >= this.roundsNeeded);\n      return;\n    }\n\n    // per-round timer\n    if (this.awaiting) {\n      this.roundRemain -= dtMs;\n      this.drawTimeBar();\n      if (this.roundRemain <= 0) {\n        this.registerMiss('timeout');\n      }\n    }\n  }\n\n  protected showResult(result: { success: boolean; score: number }): void {\n    this.onGameEnd?.(result.success, result.score);\n  }\n\n  // ---- internals ----\n  private updateInfo() {\n    const remainS = Math.ceil(this.remainMs / 1000);\n    this.infoText.text = `Round ${this.roundsDone}/${this.roundsNeeded}   Miss ${this.misses}/${this.missesAllowed}   Time ${remainS}s`;\n  }\n\n  private drawTimeBar() {\n    const W = this.app.renderer.width;\n    const y = Math.floor(this.app.renderer.height * 0.47);\n    const w = Math.floor(W * 0.7);\n    const x = Math.floor((W - w) / 2);\n    const h = 10;\n    const frac = clamp(this.roundRemain / this.roundTimeMs, 0, 1);\n    this.timeBar.clear();\n    this.timeBar.beginFill(this.colors.barBack, 0.4); this.timeBar.drawRoundedRect(x, y, w, h, 6); this.timeBar.endFill();\n    this.timeBar.beginFill(this.colors.barFill, 0.95); this.timeBar.drawRoundedRect(x, y, Math.floor(w * frac), h, 6); this.timeBar.endFill();\n  }\n\n  private nextRound(first = false) {\n    // choose target digit and how many of them\n    this.currentTarget = (Math.random() * (this.digitsMax + 1)) | 0;\n    const totalTiles = this.cols * this.rows;\n    const autoTargets = clamp(Math.round(totalTiles * (0.18 + Math.random() * 0.12)), 1, Math.max(1, Math.floor(totalTiles * 0.4)));\n    this.remainingTargets = this.targetsPerRound ?? autoTargets;\n\n    // assign numbers\n    const indices = Array.from({ length: totalTiles }, (_, i) => i);\n    shuffle(indices);\n    const targetIdxs = indices.slice(0, this.remainingTargets);\n    for (let i = 0; i < this.tiles.length; i++) {\n      const t = this.tiles[i];\n      t.found = false;\n      // reset style\n      t.bg.clear();\n      t.bg.beginFill(this.colors.tile, 0.96);\n      t.bg.drawRoundedRect(-this.tileW/2, -this.tileH/2, this.tileW, this.tileH, 16);\n      t.bg.endFill();\n      // assign value\n      if (targetIdxs.includes(i)) t.value = this.currentTarget;\n      else {\n        // ensure not target\n        let v = (Math.random() * (this.digitsMax + 1)) | 0;\n        if (v === this.currentTarget) v = (v + 1 + ((Math.random() * this.digitsMax) | 0)) % (this.digitsMax + 1);\n        t.value = v;\n      }\n      t.label.text = String(t.value);\n      t.label.style = { fontFamily: 'sans-serif', fontSize: Math.floor(this.tileH * 0.50), fill: this.colors.tileText };\n    }\n\n    this.promptText.text = `Find all ${this.currentTarget}!`;\n    this.roundRemain = this.roundTimeMs;\n    this.awaiting = true;\n    this.drawTimeBar();\n    if (!first) this.updateInfo();\n  }\n\n  private onTap(idx: number) {\n    if (!this.awaiting || this.finished) return;\n    const t = this.tiles[idx];\n    if (t.found) return; // already solved\n    const correct = (t.value === this.currentTarget);\n    if (correct) {\n      t.found = true;\n      this.remainingTargets--;\n      this.combo++;\n      const speedFrac = clamp(this.roundRemain / this.roundTimeMs, 0, 1);\n      const base = 120, comboBonus = Math.min(10, this.combo) * 20, speedBonus = Math.round(60 * speedFrac);\n      this.score += base + comboBonus + speedBonus;\n      this.flashTile(t, this.colors.good);\n      // mark visually\n      t.label.style = { fontFamily: 'sans-serif', fontSize: Math.floor(this.tileH * 0.50), fill: 0x0f5132 };\n      if (this.remainingTargets <= 0) {\n        this.awaiting = false;\n        this.roundsDone++;\n        if (this.roundsDone >= this.roundsNeeded) {\n          this.finish(true);\n        } else {\n          setTimeout(() => this.nextRound(), 160);\n        }\n      }\n    } else {\n      this.registerMiss('wrong', idx);\n    }\n  }\n\n  private registerMiss(_reason: 'wrong' | 'timeout', idx: number | null = null) {\n    if (!this.awaiting || this.finished) return;\n    this.awaiting = false;\n    this.combo = 0;\n    this.misses++;\n    this.score = Math.max(0, this.score - 150);\n    if (idx != null) this.flashTile(this.tiles[idx], this.colors.bad);\n    if (this.misses > this.missesAllowed) {\n      this.finish(false);\n    } else {\n      setTimeout(() => this.nextRound(), 220);\n    }\n  }\n\n  private flashTile(tile: Tile, color: number, alpha = 0.28) {\n    const g = new Graphics();\n    g.beginFill(color, alpha);\n    g.drawRoundedRect(-this.tileW/2, -this.tileH/2, this.tileW, this.tileH, 16);\n    g.endFill();\n    g.x = tile.root.x; g.y = tile.root.y;\n    this.scene.addChild(g);\n    const steps = 8;\n    for (let i = 1; i <= steps; i++) {\n      setTimeout(() => { g.alpha = Math.max(0, alpha * (1 - i/steps)); if (i === steps) this.scene.removeChild(g); }, i * 30);\n    }\n  }\n\n  private finish(success: boolean) {\n    if (this.finished) return;\n    this.finished = true;\n    const timeBonus = Math.round(this.remainMs / 8);\n    const roundBonus = this.roundsDone * 70;\n    const missPenalty = this.misses * 120;\n    const score = Math.max(0, this.score + timeBonus + roundBonus - missPenalty + (success ? 700 : 0));\n    this.onGameEnd?.(success, score);\n  }\n}\n"],"names":["isDifficulty","v","getDifficulty","settings","d","secondsToMs","s","fallbackMs","clamp","x","lo","hi","shuffle","arr","i","j","NumberHuntGame","GameTemplate","app","__publicField","Container","diff","W","H","bg","Graphics","Text","usableW","usableH","startY","startX","r","c","idx","root","bgTile","label","e","_e","deltaTime","dtMs","result","_a","remainS","y","w","h","frac","first","totalTiles","autoTargets","indices","_","targetIdxs","t","speedFrac","base","comboBonus","speedBonus","_reason","tile","color","alpha","g","steps","success","timeBonus","roundBonus","missPenalty","score"],"mappings":"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"}